//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    Tiles Routines                            --||
//------------------------------------------------------------------//

//---                         Constants                           --//
const
  INTERFACE_EQUIPMENT  = 387;

{Constants associated with the position in the array of the TEquiptmentSet}
const
  EQUIPMENT_HELMET     = 0;
  EQUIPMENT_CAPE       = 1;
  EQUIPMENT_NECKLACE   = 2;
  EQUIPMENT_WEAPON     = 3;
  EQUIPMENT_TORSO      = 4;
  EQUIPMENT_SHIELD     = 5;
  EQUIPMENT_LEGS       = 6;
  EQUIPMENT_GLOVES     = 7;
  EQUIPMENT_BOOTS      = 8;
  EQUIPMENT_RING       = 9;
  EQUIPMENT_AMMO       = 10;

//---                          Records                            --//

type
{Holds information about an equipment slot}
  TEquipment = record
    ID: Integer;
    Name: string;
    IsAmmo: Boolean;
    Count: Integer;
    Actions: TStringArray;
  end;

{Container for TEquiptment records}
  TEquipmentSet = record
    Items: array [0..10] of TEquipment;
    AmmoCount: Integer;
  end;

{*******************************************************************************
function NULL_EQUIPMENT: TEquipment;
By:
Description: Nulls a TEquipment.
*******************************************************************************}
function NULL_EQUIPMENT: TEquipment;
begin
  with Result do
  begin
    ID := NULL_INT;
    Name := NULL_STRING;
    IsAmmo := False;
    Count := Null_INT;
    Actions := [];
  end;
end;

{*******************************************************************************
function R_GetEquippedItemAt(Slot: Integer): TInvItem;
By: Drags111
Description: Returns a TInvItem of the item in the specified equipment slot.
                      (see constants at top of page.)
*******************************************************************************}
function R_GetEquippedItemAt(Slot: Integer): TEquipment;
var
  Inter, Child, textbytes, ID, Acts, ArrayLength: Integer;
  Action, Count, i: Integer;
  Temp: String;
begin
  Result := NULL_EQUIPMENT;
  if not R_ValidInterface(INTERFACE_EQUIPMENT) then Exit;
  GameTab(TAB_EQUIP);
  try
    inter := SmartGetFieldArrayObject(0, hook_static_GetInterfaces, INTERFACE_EQUIPMENT);
    Child := SmartGetFieldArrayObject(inter, '', (slot * 3) + 8);
    ID := SmartGetFieldInt(Child, hook_interface_GetID);
    textbytes := SmartGetFieldObject(Child, hook_interface_GetName);
    acts := SmartGetFieldObject(Child, hook_interface_GetActions);
    if (ID > 0) then
    begin
      Result.Id := ID;
      Result.Name := R_TrimHTML(R_GetJavaString(textbytes, 255));
      Result.Count := SmartGetFieldInt(Child, hook_interface_GetStack);
      Result.IsAmmo := (Result.Count > 1);

      try
        ArrayLength := (SmartGetFieldArraySize(Acts, '', 1));
        SetLength(Result.Actions, ArrayLength);
        Count := 0;

        for i := 0 to ArrayLength-1 do
        begin
          try
            Action := SmartGetFieldArrayObject(Child, hook_interface_GetActions, i);
            Temp := R_GetJavaString(Action, 255);
            if not(Temp = NULL_STRING)then
            begin
              Result.Actions[Count] := R_TrimHTML(Temp);
              Inc(Count);
            end;
          finally
            SmartFreeObject(Action);
          end;
        end;

        SetLength(Result.Actions, Count);
      finally
        SmartFreeObject(Acts);
      end;

    end;
   finally
    SmartFreeObject(Acts);
    SmartFreeObject(textbytes);
    SmartFreeObject(Child);
    SmartFreeObject(inter);
  end;
end;

{*******************************************************************************
function R_GetEquipment: TEquipmentSet;
By: Drags111
Description: Returns a TEquipmentSet of your char.
*******************************************************************************}
function R_GetEquipment: TEquipmentSet;
var
  i: Integer;
begin
  if not R_ValidInterface(INTERFACE_EQUIPMENT) then Exit;
  GameTab(TAB_EQUIP);
  for i := 0 to 10 do
  begin
    Result.Items[i] := R_GetEquippedItemAt(i);
    if (Result.Items[i].isAmmo) then
      Result.AmmoCount := Result.AmmoCount + Result.Items[i].Count;
  end;
end;

{*******************************************************************************
function R_GetEquippedIDAt(slot: Integer): Integer;
By: Drags111
Description: Returns a the ID of the item in the slot.
*******************************************************************************}
function R_GetEquippedIDAt(slot: Integer): Integer;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := Equipment.Items[slot].ID;
end;

{*******************************************************************************
function R_GetEquippedNameAt(slot: Integer): string;
By: Drags111
Description: Returns a the Name of the item in the slot.
*******************************************************************************}
function R_GetEquippedNameAt(slot: Integer): string;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := Equipment.Items[slot].Name;
end;

{*******************************************************************************
function R_HasItemEquipped(slot: Integer): Boolean;
By: Drags111
Description: Returns true if there is an item equipped at the slot.
*******************************************************************************}
function R_HasItemEquipped(slot: Integer): Boolean;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := (Equipment.Items[slot].ID <> NULL_INT);
end;

{*******************************************************************************
function R_IsEquippedIDEx(IDs: TIntegerArray): Boolean;
By: Drags111
Description: Returns true if there is an item equipped with one of the IDs.
*******************************************************************************}
function R_IsEquippedIDEx(IDs: TIntegerArray): Boolean;
var
  Equipment: TEquipmentSet;
  i, k: Integer;
begin
  Result := False;
  Equipment := R_GetEquipment;
  for i := High(IDs) downto 0 do
    for k := 10 downto 0 do
      if (IDs[i] = Equipment.Items[i].ID) then
      begin
        Result := True;
        Exit;
      end;
end;

{*******************************************************************************
function R_IsEquippedID(ID: Integer): Boolean;
By: Drags111
Description: Returns true if there is an item equipped with the ID.
*******************************************************************************}
function R_IsEquippedID(ID: Integer): Boolean;
begin
  Result := R_IsEquippedIDEx([ID]);
end;

{*******************************************************************************
function R_IsEquippedNameEx(Names: TStringArray): Boolean;
By: Drags111
Description: Returns true if there is an item equipped with one of the Names.
*******************************************************************************}
function R_IsEquippedNameEx(Names: TStringArray): Boolean;
var
  Equipment: TEquipmentSet;
  i, z: Integer;
begin
  Result := False;
  Equipment := R_GetEquipment;
  for i := 0 to 10 do
    for z := High(Names) downto 0 do
      if (Pos(Names[z], Equipment.Items[i].Name) > 0) then
      begin
        Result := True;
        Exit;
      end;
end;

{*******************************************************************************
function R_IsEquippedName(Name: string): Boolean;
By: Drags111
Description: Returns true if there is an item equipped with the name.
*******************************************************************************}
function R_IsEquippedName(Name: string): Boolean;
begin
  Result := R_IsEquippedNameEx([Name]);
end;

{*******************************************************************************
function R_GetAmmoCount: integer;
By: Drags111
Description: Returns the number of arrows or bolts etc, you have equipped.
*******************************************************************************}
function R_GetAmmoCount: Integer;
var
  Slot: TEquipment;
begin
  Slot := R_GetEquippedItemAt(EQUIPMENT_AMMO);
  Result := Slot.Count;
end;
