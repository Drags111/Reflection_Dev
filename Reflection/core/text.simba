//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                     Text Routines                            --||
//------------------------------------------------------------------//

{*******************************************************************************
function R_TrimHTML(S : string): string;
By: lordsaturn, fixed by pyroryan
Description: Removes the HTML junk from a string.
*******************************************************************************}
function R_TrimHTML(S : string): string;
var
  P, P2, PLength: integer;
  Temp: string;
begin
  P := Pos('<', S);
  P2 := Pos('>', S);
  Result := S;
  PLength := P2 - P + 1;
  while (P <> 0) and (P2 <> 0) do
  begin
    Delete(Result, P, PLength);
    P := Pos('<', Result);
    Temp := Result;
    Delete(Temp, 1, P - 1);
    PLength := Pos('>', Temp);
  end;
end;

{*******************************************************************************
function R_GetJavaString(javaString: integer; maxLength: integer): string;
By: BenLand100
Description: Returns a string from a javaString with a specified  maxLength. Do
             not let it overflow, bad things will happen.
*******************************************************************************}
function R_GetJavaString(javaString: integer; maxLength: integer): string;
begin
  SetLength(result, maxLength);
  SetLength(result, SmartStringFromString(javaString, result));
end;

{*******************************************************************************
function R_IsMenuOpen: boolean;
By: BenLand100
Description: Returns true if the menu is displayed
*******************************************************************************}
function R_IsMenuOpen: boolean;
begin
  result:= SmartGetFieldBoolean(0, hook_static_MenuOpen);
end;

{*******************************************************************************
function R_IsMenuTabbed: boolean;
By: pyroryan
Description: Returns true if the menu is tabbed
*******************************************************************************}
function R_IsMenuTabbed: boolean;
begin
  Result := SmartGetFieldBoolean(0, hook_static_IsMenuTabbed);
end;

{*******************************************************************************
function R_GetMenuCount: integer;
By: BenLand100
Description: Returns the number of menu items
*******************************************************************************}
function R_GetMenuCount: integer;
begin
  Result := SmartGetFieldInt(0, hook_static_MenuOptionCount);
end;

{*******************************************************************************
function R_GetMenuItemsPart(part : Integer) : Integer;
By: pyroryan
Description: part 1 for Actions. part 2 for Options. Supports tabbed menus.
             Tabbed menus: First part is options (part = 2)
                           Second part is actions (part = 1)
*******************************************************************************}
function R_GetMenuItemsPart(part : Integer) : TStringArray;
var
  itemsList : TStringArray;
  item : String;
  count, nodeSubList, groupNode, subMenu, menuItemNode : Integer;
  last, lastTwo, nodeList, javaString : Integer;
begin
  count := R_GetMenuCount;
  //R_Debug(ToStr(count), 'MenuCount');
  SetLength(itemsList, count);
  count := 0; //Prepare for use as index

  if (R_IsMenuTabbed) then
  begin
    nodeSubList := SmartGetFieldObject(0, hook_static_getCollapsedMenuItems);
    //R_Debug(ToStr(nodeSubList), 'nodeSubList');
    groupNode := R_getNodeSubHead(nodeSubList);
    //R_Debug(ToStr(groupNode), 'groupNode');
    while (groupNode <> 0) do
    begin
      subMenu := SmartGetFieldObject(groupNode, hook_MenuGroupNode_getNodeSubListItems);
      //R_Debug(ToStr(subMenu), 'subMenu');
      if (subMenu = 0) then
      begin
        break;
      end;
      menuItemNode := R_getNodeSubHead(subMenu);
      //R_Debug(ToStr(menuItemNode), 'menuItemNode');
      while (menuItemNode <> 0) do
      begin
        if (part = 1) then
        begin
          javaString := SmartGetFieldObject(menuItemNode, hook_menu_Action);
          if (javaString = 0) then
          begin
            //writeln('Stopping, the string is null');
            SmartFreeObject(javaString);
            break;
          end;
          item := R_GetJavaString(javaString, 256);
          SmartFreeObject(javaString);
          //R_Debug(item, 'Menu');
          itemsList[count] := R_TrimHTML(item);
          //R_Debug(ToStr(itemsList), 'itemsList');
          count := count + 1;
        end;
        if (part = 2) then
        begin
          javaString := SmartGetFieldObject(menuItemNode, hook_menu_Option);
          if (javaString = 0) then
          begin
            //writeln('Stopping, the string is null');
            SmartFreeObject(javaString);
            break;
          end;
          item := R_GetJavaString(javaString, 256);
          SmartFreeObject(javaString);
          //R_Debug(item, 'Menu');
          itemsList[count] := R_TrimHTML(item);
          //R_Debug(ToStr(itemsList), 'itemsList');
          count := count + 1;
        end;
        //Count
        lastTwo := menuItemNode;
        menuItemNode := R_getNodeSubNext(lastTwo);
        SmartFreeObject(lastTwo);
        //R_Debug(ToStr(menuItemNode), 'nextNode');
      end;
      //Count
      last := groupNode;
      groupNode := R_getNodeSubNext(last);
      SmartFreeObject(last);
      //R_Debug(ToStr(groupNode), 'nextGroupNode');
      SmartFreeObject(subMenu);
      SmartFreeObject(menuItemNode);
    end;
    SmartFreeObject(groupNode);
    SmartFreeObject(nodeSubList);
  end else
  begin //Not tabbed
    nodeList := SmartGetFieldObject(0, hook_static_MenuNodeList);
    //R_Debug(ToStr(nodeList), 'nodeList');
    menuItemNode := R_getNodeHead(nodeList);
    //R_Debug(ToStr(menuItemNode), 'menuItemNode');
    while (menuItemNode <> 0) do
    begin
      if (part = 1) then
      begin
        javaString := SmartGetFieldObject(menuItemNode, hook_menu_Action);
        //R_Debug(ToStr(javaString), 'javaString');
        if (javaString = 0) then
        begin
          //writeln('Stopping, the string is null');
          SmartFreeObject(javaString);
          break;
        end;
        item := R_GetJavaString(javaString, 256);
        SmartFreeObject(javaString);
        //R_Debug(ToStr(item), 'item');
        itemsList[count] := R_TrimHTML(item);
        //R_Debug(ToStr(itemsList), 'itemsList');
        count := count + 1;
      end;
      if (part = 2) then
      begin
        javaString := SmartGetFieldObject(menuItemNode, hook_menu_Option);
        //R_Debug(ToStr(javaString), 'javaString');
        if (javaString = 0) then
        begin
          //writeln('Stopping, the string is null');
          SmartFreeObject(javaString);
          break;
        end;
        item := R_GetJavaString(javaString, 256);
        SmartFreeObject(javaString);
        //R_Debug(ToStr(item), 'item');
        itemsList[count] := R_TrimHTML(item);
        //R_Debug(ToStr(itemsList), 'itemsList');
        count := count + 1;
      end;
      //Count
      last := menuItemNode;
      menuItemNode := R_getNodeNext(last);
      SmartFreeObject(last);
      //R_Debug(ToStr(menuItemNode), 'nextNode');
    end;
    SmartFreeObject(menuItemNode);
    SmartFreeObject(nodeList);
  end;
  SetLength(itemsList, count);
  Result := itemsList;
end;

{*******************************************************************************
function R_GetMenuText: TStringArray;
By: BenLand100
Description: Dumps the data from the MenuNodeList into a TStringArray
*******************************************************************************}
function R_GetMenuText: TStringArray;
var
  count, nodeList, head, next, last, javaString: Integer;
  item: string;
begin
  try
    nodeList:= SmartGetFieldObject(0, hook_static_MenuNodeList);
    head:= SmartGetFieldObject(nodeList, hook_nodelist_Head);
    //for some reason, the head has null strings, so skip it
    next:= SmartGetFieldObject(head, hook_node_Next);
    count:= R_GetMenuCount;
    SetLength(result,count);
    repeat
      javaString:= SmartGetFieldObject(next, hook_menu_Action);
      if (javaString = 0) then
      begin
        //writeln('Stopping, the string is null');
        SmartFreeObject(javaString);
        break;
      end;
      item:= R_GetJavaString(javaString,256);
      SmartFreeObject(javaString);
      javaString:= SmartGetFieldObject(next, hook_menu_Option);
      item:= item + ' ' + R_GetJavaString(javaString,256);
      SmartFreeObject(javaString);
      result[count-1]:= R_TrimHTML(item);
      last:= next;
      next:= SmartGetFieldObject(last, hook_node_Next);
      SmartFreeObject(last);
      count:= count - 1;
    until (count = 0);
    SmartFreeObject(next);
    SmartFreeObject(head);
    SmartFreeObject(nodeList);
  except
    try
      SmartFreeObject(next);
    except
    end;
    try
      SmartFreeObject(head);
    except
    end;
    try
      SmartFreeObject(nodeList);
    except
    end;
    wait(50);
    Result := R_GetMenuText;
  end;
end;

{*******************************************************************************
function R_ChooseOptionMulti(Options : TStringArray) : Boolean;
By: Drags111 - Based off nava2's and Lordsaturns.
Description: Chooses the first found option of "Options" from the Right
             Click menu, returns True and Clicks if found, else it will Move the
             mouse to a random Coord or select cancel.
*******************************************************************************}
function R_ChooseOptionMulti(Options : TStringArray) : Boolean;
var
  i, i2, xOff, yOff, t: Integer;
  P : TPoint;
  MenuOptions: TStringArray;

begin
  Result := False;
  if not R_IsMenuOpen then
  begin
    MarkTime(t);
    while(TimeFromMark(t) < 1000)do ;
    if not R_IsMenuOpen then Exit;
  end;

  P := Point(SmartGetFieldInt(0, hook_static_MenuX) + 4, SmartGetFieldInt(0, hook_static_MenuY) + 4);
  //Writeln('MenuX: '+ToStr(SmartGetFieldInt(0, hook_static_MenuX)));
  //Writeln('MenuY: '+ToStr(SmartGetFieldInt(0, hook_static_MenuY)));
  MenuOptions := R_GetMenuText;

  // Cstrike added this block
  if (high(MenuOptions) < 0) or (high(Options) < 0) then
  begin
    Writeln('Warning: High array size for MenuOptions/Options is < 0, aborting R_ChooseOptionMulti to prevent crash');
    Exit;
  end;

  for i := 0 to High(MenuOptions) do
  begin
    for i2 := 0 to High(Options) do
    begin
      if(Pos(Lowercase(Options[i2]), Lowercase(MenuOptions[i])) <> 0)then
      begin
        xOff := RandomRange(4, 4 + Random(Length(MenuOptions[i]) * 4 - 4));
        yOff := 21 + (16 * i) + RandomRange(2, 10);
        Mouse(P.x + xOff, P.y + yOff, 0, 0, True);
        Wait(RandomRange(80, 100));
        Result := not R_IsMenuOpen;
        Exit;
      end;
    end;
  end;

  case Random(2) of
    0: R_ChooseOptionMulti(['Cancel']);
    1: while R_IsMenuOpen do
       begin
         MMouse(Random(MSX2), Random(MSY2), 0, 0);
         Wait(RandomRange(100, 200));
       end;
  end;
end;

{*******************************************************************************
function R_getMenuIndex(text: string): Integer;
By: Timer [Train]
Description: Returns the index of the desired click.
*******************************************************************************}
function R_GetMenuIndex(text: string): Integer;
var
  menu: TStringArray;
  i: Integer;
begin
  menu := R_GetMenuText;
  Result := -1;
  if (High(menu) > -1) then
    for i := 0 to High(menu) do
    begin
      if (Pos(Lowercase(text), Lowercase(menu[i])) <> 0) then
      begin
        Result := i;
        Exit;
      end;
    end;
end;

{*******************************************************************************
function R_ClickSubMenu(items: TStringArray; mid, sid: Integer): Boolean;
By: Timer [Train]
Description: Clicks a sub menu.
*******************************************************************************}
function R_ClickSubMenu(items: TStringArray; mid, sid: Integer): Boolean;
var
  x, y: Integer;
  menuLoc, subLoc: TPoint;
  t: LongInt;
begin
  Result := False;
  menuLoc := Point(SmartGetFieldInt(0, hook_static_MenuX) + 4, SmartGetFieldInt(0, hook_static_MenuY) + 4);
  x := RandomRange(4, Length(items[mid]) * 4);
  y := 21 + 16 * mid + RandomRange(3, 12);
  MMouse(menuLoc.x + x, menuLoc.y + y, 0, 0);
  Wait(RandomRange(125, 150));
  if (R_IsMenuOpen) then
  begin
    subLoc := Point(SmartGetFieldInt(0, hook_static_MenuX2) + 4, SmartGetFieldInt(0, hook_static_MenuY2) + 4);
    GetMousePos(x, y);
    x := RandomRange(4, Length(items[sid]) * 4);
    MMouse(subLoc.x + x, y, 0, RandomRange(-2, 2));
    Wait(RandomRange(125, 150));
    if (R_IsMenuOpen) then
    begin
      GetMousePos(x, y);
      y := 16 * sid + RandomRange(3, 12) + 21;
      MMouse(x, subLoc.y + y, RandomRange(-2, 2), 0);
      Wait(RandomRange(125, 150));
      if (R_IsMenuOpen) then
      begin
        GetMousePos(x, y);
        Mouse(x, y, 0, 0, True);
        if (R_IsMenuOpen) then
        begin
          while (TimeFromMark(t) < 1500) and (R_IsMenuOpen) do
            Wait(150);
        end;
        Result := not R_IsMenuOpen;
      end;
    end;
  end;
  if (not Result) then
    if (R_IsMenuOpen) then
      case Random(2) of
        0: R_ChooseOptionMulti(['Cancel']);
        1: while R_IsMenuOpen do
           begin
             MMouse(Random(MSX2), Random(MSY2), 0, 0);
             Wait(RandomRange(100, 200));
           end;
      end;
end;

{*******************************************************************************
function R_ClickMenuIndex(index: Integer): Boolean;
By: pyroryan, Timer [Train]
Description: Clicks a Menu Index.
*******************************************************************************}
function R_ClickMenuIndex(index: Integer): Boolean;
var
  allItems: TStringArray;
  item: string;
  nodeSubList, groupNode, subMenu, menuItemNode, last, lastTwo, xOff, yOff: Integer;
  P: TPoint;
  t, mc, sc, sca: LongInt;
begin
  mc := 1;
  allItems := R_GetMenuText;
  if (Length(allItems) < index) then
  begin
    Result := False;
    Exit;
  end;
  if (index = -1) then
  begin
    Result := False;
    Exit;
  end;
  if (not R_IsMenuOpen) then
  begin
    ClickMouse2(False);
    MarkTime(t);
    while (TimeFromMark(t) < 1000) do
      Wait(50);
    if (not R_IsMenuOpen) then
      Exit;
  end;
  item := allItems[index];
  P := Point(SmartGetFieldInt(0, hook_static_MenuX) + 4, SmartGetFieldInt(0, hook_static_MenuY) + 4);
  if (R_IsMenuTabbed) then
  begin
    sc := 0;
    nodeSubList := SmartGetFieldObject(0, hook_static_getCollapsedMenuItems);
    groupNode := R_getNodeSubHead(nodeSubList);
    while (groupNode <> 0) do
    begin
      subMenu := SmartGetFieldObject(groupNode, hook_MenuGroupNode_getNodeSubListItems);
      if (subMenu = 0) then
      begin
        break;
      end;
      menuItemNode := R_getNodeSubHead(subMenu);
      sca := 0;
      while (menuItemNode <> 0) do
      begin
        Inc(sc);
        if (sc = index) then
        begin
          R_clickSubMenu(allItems, mc, sca);
          Exit;
        end;
        lastTwo := menuItemNode;
        menuItemNode := R_getNodeSubNext(lastTwo);
        SmartFreeObject(lastTwo);
        Inc(sca);
      end;
      last := groupNode;
      groupNode := R_getNodeSubNext(last);
      SmartFreeObject(last);
      SmartFreeObject(subMenu);
      SmartFreeObject(menuItemNode);
      Inc(mc);
    end;
    SmartFreeObject(groupNode);
    SmartFreeObject(nodeSubList);
  end else
  begin
    xOff := RandomRange(4, 4 + Random(Length(item) * 4 - 4));
    yOff := 21 + (16 * index) + RandomRange(2, 10);
    Mouse(P.x + xOff, P.y + yOff, 0, 0, True);
    Wait(RandomRange(80, 100));
    Result := not R_IsMenuOpen;
    Exit;
  end;
  case Random(2) of
    0: R_ChooseOptionMulti(['Cancel']);
    1: while R_IsMenuOpen do
       begin
         MMouse(Random(MSX2), Random(MSY2), 0, 0);
         Wait(RandomRange(100, 200));
       end;
  end;
end;

{*******************************************************************************
function R_ChooseOption(Option : String) : Boolean;
By: Drags111
Description: Chooses the option "Option" from the Right Click menu, returns
             True and clicks if found, else it will Move the Mouse to a random
             Coord or will select cancel.
*******************************************************************************}
function R_ChooseOption(Option : String) : Boolean;
begin
  Result := R_ChooseOptionMulti([Option]);
end;

{*******************************************************************************
function R_ChooseOptionDual(AboveOptionFragment, BelowOptionFragment: String; ChooseAboveOption: Boolean): Boolean;
By: Cstrike, copied mainly from Drags111
Description: Checks for two paired text that should be next to each other.
Useful for fishing when you have Net/Harpoon versus Cage/Harpoon and you are
trying to 'harpoon'. If the texts aren't next to each other, will return false.
ChooseTopOption = true means it will choose AboveOption, false = BelowOption.
*******************************************************************************}
function R_ChooseOptionDual(AboveOptionFragment, BelowOptionFragment: String; ChooseAboveOption: Boolean): Boolean;
var
  i, xOff, yOff, t: Integer;
  P : TPoint;
  MenuOptions: TStringArray;
begin
  Result := False;
  if not R_IsMenuOpen then
  begin
    MarkTime(t);
    while (TimeFromMark(t) < 1000) do
      wait (50);
    if not R_IsMenuOpen then Exit;
  end;
  P := Point(SmartGetFieldInt(0, hook_static_MenuX) + 4, SmartGetFieldInt(0, hook_static_MenuY) + 4);
  MenuOptions := R_GetMenuText;
  if (high(MenuOptions) < 1) then
  begin
    Writeln('MenuOptions size is not large enough (<2 options), returning false and exiting R_ChooseOptionDual');
    Exit;
  end;
  if ChooseAboveOption then // Choose top option
  begin
    for i := 0 to High(MenuOptions) - 1 do
    begin
      if (Pos(Lowercase(AboveOptionFragment), Lowercase(MenuOptions[i])) <> 0) and (pos(Lowercase(BelowOptionFragment), Lowercase(MenuOptions[(i+1)])) <> 0) then
      begin
        xOff := RandomRange(4, 4 + Random(Length(MenuOptions[i]) * 4 - 4));
        yOff := 21 + (16 * i) + RandomRange(2, 10);
        Mouse(P.x + xOff, P.y + yOff, 0, 0, True);
        Wait(RandomRange(80, 100));
        Result := not R_IsMenuOpen;
        Exit;
      end;
    end;
  end else // Else choose bottom option
  begin
    for i := 1 to High(MenuOptions) do
    begin
      if (Pos(Lowercase(BelowOptionFragment), Lowercase(MenuOptions[i])) <> 0) and (pos(Lowercase(AboveOptionFragment), Lowercase(MenuOptions[(i-1)])) <> 0) then
      begin
        xOff := RandomRange(4, 4 + Random(Length(MenuOptions[i]) * 4 - 4));
        yOff := 21 + (16 * i) + RandomRange(2, 10);
        Mouse(P.x + xOff, P.y + yOff, 0, 0, True);
        Wait(RandomRange(80, 100));
        Result := not R_IsMenuOpen;
        Exit;
      end;
    end;
  end;
  // If it falls through...
  case Random(2) of
    0: R_ChooseOptionMulti(['Cancel']);
    1: while R_IsMenuOpen do
       begin
         MMouse(Random(MSX2), Random(MSY2), 0, 0);
         Wait(RandomRange(100, 200));
       end;
  end;
end;

{*******************************************************************************
function R_OptionExists(option: string): Boolean;
By: Drags111
Description: Returns true if an option exists in the choose option menu. Choose
             option menu does NOT have to be open.
*******************************************************************************}
function R_OptionExists(Option : string) : Boolean;
var
  i: integer;
  MenuOptions: TStringArray;
begin
  Result := False;
  MenuOptions := R_GetMenuText;

  // Cstrike added this block
  if (high(MenuOptions) < 0) then
  begin
    Writeln('Warning: High array size for MenuOptions is < 0, aborting R_ChooseOption to prevent crash');
    Exit;
  end;

  for i := High(MenuOptions) downto 0 do
  begin
    Result := (Pos(Option, MenuOptions[i]) > 0);
    if Result then Exit;
  end;
end;

{*******************************************************************************
function R_GetUpText: string;
By: Drags111
Description: Gets the UpText (the text in the upper left corner of RS).
*******************************************************************************}
function R_GetUpText: string;
var
  MenuOptions: TStringArray;
  First: String;
begin
  MenuOptions := R_GetMenuText;
  try
    First := Trim(MenuOptions[0]);
    Result := First;
    if (Length(MenuOptions) > 1) and (Result <> '') then
      Result := Result+' / '+inttostr(Length(MenuOptions))+' more options';
  except
    WriteLn('R_GetUptext failed!');
    Result := '';
  end;
end;

{*******************************************************************************
function R_IsUpTextMulti(UpText: TStringArray): Boolean;
By: Drags111
Description: Returns true if any instance of the UpText is found.
*******************************************************************************}
function R_IsUpTextMulti(UpText: TStringArray): Boolean;
var
  i,t: integer;
  UT: String;
begin
  t := 0;
  UT := R_GetUpText;
  if (Length(UT) = 0) then
  repeat
    R_Debug('Text length is 0, something is wrong. Retrying.','R_IsUpTextMulti');
    Wait(1+Random(10));
    UT := R_GetUpText;
    Inc(t);
  until (Length(UT) > 0) or (t > 9);
  for I := 0 to High(UpText) do
  begin
    Result := Pos(Lowercase(UpText[I]), Lowercase(UT)) > 0;
    if Result then Exit;
  end;
end;

{*******************************************************************************
function R_IsUpText(UpText: string): Boolean;
By: Drags111
Description: Returns true if UpText is found.
*******************************************************************************}
function R_IsUpText(UpText: string): Boolean;
begin
  Result := R_IsUpTextMulti([UpText]);
end;

{*******************************************************************************
function R_WaitOptionMulti(S: TStringArray; Time: Integer): Boolean;
By: Naike
Description: Waits for a string and selects it
*******************************************************************************}
function R_WaitOptionMulti(S: TStringArray; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if r_ChooseOptionMulti(S) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

{*******************************************************************************
function R_WaitOption(S: String; Time: Integer): Boolean;
By: Naike
Description: Waits for a string and selects it
*******************************************************************************}
function R_WaitOption(S: String; Time: Integer): Boolean;
begin
  Result := r_WaitOptionMulti([S], Time);
end;

{*******************************************************************************
function R_WaitUpTextMulti(S: TStringArray; Time: Integer): Boolean;
By: Naike
Description: Waits for a uptext
*******************************************************************************}
function R_WaitUpTextMulti(S: TStringArray; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if r_IsUpTextMulti(S) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

{*******************************************************************************
function R_WaitUpText(S: String; Time: Integer): Boolean;
By: Naike
Description: Waits for a uptext
*******************************************************************************}
function R_WaitUpText(S: String; Time: Integer): Boolean;
begin
  Result := r_WaitUpTextMulti([S], Time);
end;
