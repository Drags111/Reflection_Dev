//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                  Inventory Routines                          --||
//------------------------------------------------------------------//

//---                               Constants                               --//
const
  INTERFACE_INVENTORY                                   = 149;
  INTERFACE_INVENTORY_BANKOPEN                          = 763;


//---                                Records                                --//
type
{Holds information pertaining to an inventory slot}
  TInvItem = record
    ID, StackSize, Slot: integer;
    Name: String;
    Actions: TStringArray;
  end;

{Container for TInvItem}
  TInvItemArray = array of TInvItem;

{*******************************************************************************
function NULL_INVITEM: TInvItem;
Description: Nulls a TInvItem
*******************************************************************************}
function NULL_INVITEM: TInvItem;
begin
  Result.ID := NULL_INT;
  Result.StackSize := NULL_INT;
  Result.Slot := NULL_INT;
  Result.Name := NULL_STRING;
  Result.Actions := [];
end;

{*******************************************************************************
function R_NewInvItem(IDa, S, SS: Integer; N: String; A: TStringArray): TInvItem;
Description: Creates a new Inventory Item based on the parameters.
*******************************************************************************}
function R_NewInvItem(IDa, S, SS: Integer; N: String; A: TStringArray): TInvItem;
begin
  Result.ID := IDa;
  Result.Slot := S;
  Result.StackSize := SS;
  Result.Name := N;
  Result.Actions := A;
end;

{*******************************************************************************
function R_GetInventoryInterfaceIndex: Integer;
By: Drags111
Description: Returns the inventory interface index, depending on if the bank
  is open or not. If it is open, the interface index is 763. If it's just normal
  inventory with no bank open, the index is 149
*******************************************************************************}
function R_GetInventoryInterfaceIndex: Integer;
begin
  Result := NULL_INT;
  if not (R_ValidInterface(INTERFACE_INVENTORY_BANKOPEN) or
   R_ValidInterface(INTERFACE_INVENTORY))then
    Exit;
  Result := INTERFACE_INVENTORY;
  if(R_ValidInterface(INTERFACE_INVENTORY_BANKOPEN))then
    Result := INTERFACE_INVENTORY_BANKOPEN;
end;

{*******************************************************************************
function R_GetInvItemAt(slot: integer): TInvItem;
By: Drags111
Description: Returns a TInvItem from the specific slot [1-27]. If slot is empty,
it returns NullInvItem;
*******************************************************************************}
function R_GetInvItemAt(slot: integer): TInvItem;
var
  Inventory, Item, Name, Actions, ID: integer;
  ArrayLength, Count, Action, i: Integer;
  Temp: String;
begin
  Result := NULL_INVITEM;

  if R_ValidInterface(INTERFACE_INVENTORY) then
    GameTab(tab_Inv);

  try
    Inventory := R_GetInterface(R_GetInventoryInterfaceIndex, 0);
    Item := SmartGetFieldArrayObject(Inventory, hook_interface_GetChildren, slot-1);
    Name := SmartGetFieldObject(Item, hook_interface_GetName);
    Actions := SmartGetFieldObject(Item, hook_interface_GetActions);

    ID := SmartGetFieldInt(Item, hook_interface_GetID);
    if(ID > 0)then
    begin
      Result.ID := ID;
      Result.StackSize := SmartGetFieldInt(Item, hook_interface_GetStack);
      Result.Slot := slot;
      Result.Name := R_TrimHTML(R_GetJavaString(Name, 255));

      try
        ArrayLength := (SmartGetFieldArraySize(Actions, '', 1));
        SetLength(Result.Actions, ArrayLength);
        Count := 0;

        for i := 0 to ArrayLength-1 do
        begin
          try
            Action := SmartGetFieldArrayObject(Item, hook_interface_GetActions, i);
            Temp := R_GetJavaString(Action, 255);
            if not(Temp = NULL_STRING)then
            begin
              Result.Actions[Count] := R_TrimHTML(Temp);
              Inc(Count);
            end;
          finally
            SmartFreeObject(Action);
          end;
        end;

        SetLength(Result.Actions, Count);
      finally
        SmartFreeObject(Actions);
      end;
    end;
  finally
    SmartFreeObject(Inventory);
    SmartFreeObject(Item);
    SmartFreeObject(Name);
    SmartFreeObject(Actions);
  end;
end;

{*******************************************************************************
function R_GetInventoryItems: TInvItemArray;
By: Drags111
Description: Returns an array of all of the inv items in the inventory.
*******************************************************************************}
function R_GetInventoryItems: TInvItemArray;
var
  i, c: Integer;
  Temp: TInvItem;
begin
  SetLength(Result, 28);
  for i := 0 to High(Result) do
  begin
    Temp := R_GetInvItemAt(i);
    if not(Temp=NULL_INVITEM)then
    begin
      Result[c] := Temp;
      Inc(c);
    end;
  end;
  SetLength(Result, c);
end;

{*******************************************************************************
function R_GetItemStackSizeAt(slot: integer): integer;
By: Drags111
Description: Gets the stack size at the specific slot.
*******************************************************************************}
function R_GetItemStackSizeAt(slot: integer): integer;
var
  Temp: TInvItem;
begin
  Temp := R_GetInvItemAt(slot);
  Result := Temp.StackSize;
end;

{*******************************************************************************
function R_GetItemIDAt(slot: integer): integer;
By: Drags111
Description: Gets the ID of an item at a specific slot.
*******************************************************************************}
function R_GetItemIDAt(slot: integer): integer;
var
  Temp: TInvItem;
begin
  Temp := R_GetInvItemAt(slot);
  Result := Temp.ID;
end;

{*******************************************************************************
function R_GetItemNameAt(slot: integer): String;
By: Drags111
Description: Gets the name of an item at a specific slot.
*******************************************************************************}
function R_GetItemNameAt(slot: integer): String;
var
  Temp: TInvItem;
begin
  Temp := R_GetInvItemAt(slot);
  Result := Temp.Name;
end;

{*******************************************************************************
function R_InvCount: integer;
By: Nava2
Description: Counts the number of items in the inventory.
*******************************************************************************}
function R_InvCount: integer;
var
  Inventory, Item, ID, i: integer;
begin
  Result := 0;

  if R_ValidInterface(INTERFACE_INVENTORY) then
    GameTab(tab_Inv);

  try
    Inventory := R_GetInterface(R_GetInventoryInterfaceIndex, 0);
    for i := 0 to 27 do
    begin
      Item := SmartGetFieldArrayObject(Inventory, hook_interface_GetChildren, i);
      ID := SmartGetFieldInt(Item, hook_interface_GetID);
      if (ID > 0) then
        inc(Result);

      SmartFreeObject(Item);
    end;
  finally
    SmartFreeObject(Inventory);
    SmartFreeObject(Item);
  end;
end;

{*******************************************************************************
function R_InvEmpty : Boolean;
By: Zyt3x
Description: Results true if the inventory is empty
*******************************************************************************}
function R_InvEmpty : Boolean;
begin
  Result := (R_InvCount = 0);
end;

{*******************************************************************************
function R_InvFull : Boolean;
By: Zyt3x
Description: Results true if the inventory is full
*******************************************************************************}
function R_InvFull : Boolean;
begin
  Result := (R_InvCount = 28);
end;

{*******************************************************************************
function R_ItemSlotExists(Slot: integer): boolean;
By: Drags111
Description: Returns true if an item exists at the specified slot.
*******************************************************************************}
function R_ItemSlotExists(Slot: integer): boolean;
begin
  Result := (R_GetItemIDAt(slot) > 0);
end;

{*******************************************************************************
function R_ItemExistsEx(TheVarArr: TVariantArray; var Items: TInvItemArray): boolean;
By: mormonman/drags111
Description: Returns true if one of the items is found at least once in the
             inventory. Also returns all of the items found into the var Items.
*******************************************************************************}
function R_ItemExistsEx(TheVarArr: TVariantArray; var Items: TInvItemArray): boolean;
var
  i, h, Index, vType: integer;
  ItemArr: TInvItemArray;
  B: Boolean;
begin
  Result := false;
  SetLength(Items, 28);
  ItemArr := R_GetInventoryItems;
  for i := 0 to High(ItemArr) do
    for h := 0 to High(TheVarArr) do
    begin
      vType := VarType(TheVarArr[h]);
      if (vType = varString) then
        TheVarArr[h] := LowerCase(Trim(TheVarArr[h]));
      case vType of
        varInteger: B := (ItemArr[i].ID = TheVarArr[h]);
        varString: B := (Pos(TheVarArr[h], LowerCase(Trim(ItemArr[i].Name))) > 0);
        else Exit;
      end;
      if not B then
        Continue;
      Items[Index] := ItemArr[i];
      Inc(Index);
    end;
  SetLength(Items, Index);
  Result := (Index > 0);
end;

{*******************************************************************************
function R_ItemExists(TheVar: Variant; var Item: TInvItem): Boolean;
By: mormonman
Description: Returns true if the item is found at least once in the inventory.
             Also returns the first item found into the var Item.
*******************************************************************************}
function R_ItemExists(TheVar: Variant; var Item: TInvItem): Boolean;
var
  Items: TInvItemArray;
begin
  Result := R_ItemExistsEx([TheVar], Items);
  if Result then
    Item := Items[0];
end;

{*******************************************************************************
function R_CountItemEx(TheVarArr: TVariantArray): Integer;
By: mormonman
Description: Counts all items with TheVarArr[i](s). *DOES NOT COUNT THE STACKS*
*******************************************************************************}
function R_CountItemEx(TheVarArr: TVariantArray): Integer;
var
  Items: TInvItemArray;
begin
  Result := 0;
  if R_ItemExistsEx(TheVarArr, Items) then
    Result := Length(Items);
end;

{*******************************************************************************
function R_CountItem(TheVar: Variant): Integer;
By: mormonman
Description: Returns the number of items in your inventory with TheVar.
*******************************************************************************}
function R_CountItem(TheVar: Variant): Integer;
begin
  Result := R_CountItemEx([TheVar]);
end;

{*******************************************************************************
function R_CountItemsButEx(TheVarArr: TVariantArray): Integer;
By: mormonman
Description: Returns the number of items in your inventory besides TheVarArr.
*******************************************************************************}
function R_CountItemsButEx(TheVarArr: TVariantArray): Integer;
begin
  Result := (R_InvCount - R_CountItemEx(TheVarArr));
end;

{*******************************************************************************
function R_CountItemsBut(TheVar: Variant): Integer;
By: mormonman
Description: Returns the number of items in your inventory besides TheVarA.
*******************************************************************************}
function R_CountItemsBut(TheVar: Variant): Integer;
begin
  Result := R_CountItemsButEx([TheVar]);
end;

{*******************************************************************************
function R_ClickItem(Slot: Integer; Left: Boolean; Action: String): boolean;
By: Drags111
Description: Clicks the slot in the inventory, and if left is
            set to false, Right clicks and performs the action. Otherwise, Left
            clicks. Ex: R_ClickItem(123, false, 'Wield');
                                  OR
                        R_ClickItem(123, true, ''); //Left clicks.
*******************************************************************************}
function R_ClickItem(Slot: Integer; Left: Boolean; Action: String): boolean;
var
  item: TInvItem;
begin
  Result := false;
  Item := R_GetInvItemAt(slot);
  if(Item = NULL_INVITEM)then Exit;
  Result := True;
  if left then
    MouseItem(slot, true)
  else
  begin
    MouseItem(slot, false);
    Result := R_ChooseOption(Action);
  end;
end;

{*******************************************************************************
function R_ClickItemBy(TheVar: Variant; Left: Boolean; Action: String): boolean;
By: Drags111
Description: Clicks the first item in the inventory with TheVar, and if left is
             set to true, Left clicks and performs the action. Otherwise, right
             clicks. Ex: R_ClickItemID(123, false, 'Wield');
                                  OR
                        R_ClickItemID(123, true, ''); //Left clicks (use).
*******************************************************************************}
function R_ClickItemBy(TheVar: Variant; Left: Boolean; Action: String): boolean;
var
  Item: TInvItem;
begin
  if R_ItemExists(TheVar, Item) then
    Result := R_ClickItem(Item.Slot, Left, Action);
end;

{*******************************************************************************
procedure R_DropItem(Slot: integer);
By: Drags111
Description: Drops the item at the slot.
*******************************************************************************}
procedure R_DropItem(Slot: integer);
var
  mt, t: integer;
begin
  MarkTime(mt);
  while(R_ItemSlotExists(slot) and (TimeFromMark(mt) < 5000))do
  begin
    MouseItem(slot, false);
    R_ChooseOption('drop');
    MarkTime(t);
    while(R_ItemSlotExists(slot) and (TimeFromMark(t) < 1500))do
      wait(25+Random(25));
  end;
end;

{*******************************************************************************
procedure R_DropAllItems;
By: Drags111
Description: Drops all items in the inventory.
*******************************************************************************}
procedure R_DropAllItems;
var
  i: integer;
begin
  for i := 1 to 28 do
    R_DropItem(i);
end;

{*******************************************************************************
procedure R_DropAllItemsByEx(TheVarArr: TVariantArray);
By: mormonman
Description: Drops all items in the inventory with any of the specified IDs/Names.
*******************************************************************************}
procedure R_DropAllItemsByEx(TheVarArr: TVariantArray);
var
  Items: TInvItemArray;
  i: integer;
begin
  if R_ItemExistsEx(TheVarArr, Items) then
    for i := 0 to High(Items) do
      R_DropItem(Items[i].Slot);
end;

{*******************************************************************************
procedure R_DropAllItemsBy(TheVar: Variant);
By: mormonman
Description: Drops all items in the inventory with the specified ID/Name.
*******************************************************************************}
procedure R_DropAllItemsBy(TheVar: Variant);
begin
  R_DropAllItemsByEx([TheVar]);
end;

{*******************************************************************************
procedure R_DropItemsButSlotEx(slots: TIntegerArray);
By: Drags111
Description: Drops all items in the inventory except those in the specified slots.
*******************************************************************************}
procedure R_DropItemsButSlotEx(slots: TIntegerArray);
var
  i: integer;
begin
  for i := 1 to 28 do
    if not(InIntArray(slots, i))then
      R_DropItem(i);
end;

{*******************************************************************************
procedure R_DropItemsButSlot(slot: integer);
By: Drags111
Description: Drops all items in the inventory except the one in the specified slot.
*******************************************************************************}
procedure R_DropItemsButSlot(slot: integer);
begin
  R_DropItemsButSlotEx([slot]);
end;

{*******************************************************************************
procedure R_DropItemsButEx(TheVarArr: TVariantArray);
By: mormonman
Description: Drops all items in the inventory except those w/ the specified IDs.
*******************************************************************************}
procedure R_DropItemsButEx(TheVarArr: TVariantArray);
var
  Items: TInvItemArray;
  Slots: TIntegerArray;
  i: integer;
begin
  if R_ItemExistsEx(TheVarArr, Items) then
  begin
    SetLength(Slots, Length(Items));
    for i := 0 to High(Items) do
      Slots[i] := Items[i].Slot;
    R_DropItemsButSlotEx(Slots);
  end;
end;

{*******************************************************************************
procedure R_DropItemsBut(TheVar: Variant);
By: mormonman
Description: Drops all items in the inventory except those w/ the specified Name.
*******************************************************************************}
procedure R_DropItemsBut(TheVar: Variant);
begin
  R_DropItemsButEx([TheVar]);
end;

{*******************************************************************************
procedure R_DumpItems(Items: TInvItemArray);
By: Drags111
Description: Prints out the TInvItemArray nice and neatly.
*******************************************************************************}
procedure R_DumpItems(Items: TInvItemArray);
var
  i: integer;
begin
  for i := 0 to High(Items)do
  begin
    Writeln('Slot: '+ToStr(Items[i].Slot));
    Writeln('   Name: '+Items[i].Name);
    Writeln('   ID: '+ToStr(Items[i].ID));
    Writeln('   Stack Size: '+ToStr(Items[i].StackSize));
    Writeln('   Actions: '+ToStr(Items[i].Actions));
  end;
end;

{*******************************************************************************
procedure R_DumpInvEx(all: Boolean);
By: 3Garrett3
Description: Prints out the inventory, `all' specifies whether or not to dump
	     empty inventory spaces.
*******************************************************************************}
procedure R_DumpInvEx(all: Boolean);
var
  i : Integer;
  Inv : TInvItem;
begin
for i := 1 to 28 do
  begin
    if (all or R_ItemSlotExists(i)) then
    begin
      Inv := R_GetInvItemAt(i);
      Writeln('Slot: '+ ToStr(i));
      Writeln('    Name: '+Inv.Name);
      Writeln('    ID: '+ToStr(Inv.ID));
      Writeln('    Actions: '+ ToStr(Inv.Actions));
      Writeln('    StackSize: '+ ToStr(Inv.StackSize));
    end;
  end;
end;

{*******************************************************************************
procedure R_DumpInv;
By: 3Garrett3
Description: Prints out all inventory items, including empty slots.
*******************************************************************************}
procedure R_DumpInv;
begin
  R_DumpInvEx(True);
end;
