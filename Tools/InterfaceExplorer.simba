(*
InterfaceExplorer
=================

With this tool, you can effectively search through the active interfaces and
find where certain things are located, get their children, and learn what
interfaces do what. Very useful for development especially in banks, randoms,
and things of that sort.

*)
program InterfaceExplorer;
{$DEFINE SMART}
{$i srl\srl.scar}
{$i srl\srl\misc\paintsmart.scar}
{$i Reflection_Dev\Reflection.simba}

const

{---SMART Setup Constants---}
  WORLD = 35;
  MEMBERS = false;
  SIGNED = true;
  SUPERDETAIL = false;
{---------------------------}

var
  ifaceExplorer : TForm;
  CurrInterface, CurrChild, CurrComp, ChildInfo: TLabel;
  InterfaceList : TListBox;
  RefreshButton: TButton;
  ListGroup: TGroupBox;
  LastClicked: TIntegerArray;
  Level: Integer;
  InfoHousing: TScrollBox;

procedure RefreshList;
var
  IFaces: TIntegerArray;
  I: Integer;
begin
  InterfaceList.ITEMS.Clear;
  IFaces := R_GetValidInterfaces;
  for I := 0 to High(IFaces) do
  begin
    if(Length(R_GetValidChildren(IFaces[i])) > 0)then
      InterfaceList.ITEMS.Append(ToStr(IFaces[i]) + '...')
    else
      InterfaceList.ITEMS.Append(ToStr(IFaces[i]));
  end;
  Level := 1;
  LastClicked[0] := -1;
  LastClicked[1] := -1;
  LastClicked[2] := -1;
  CurrChild.Visible := False;
  CurrComp.Visible := False;
  ChildInfo.CAPTION := '';
  ChildInfo.Visible := False;
end;

const
  CR = #13;
  LF = #10;
  CRLF = CR + LF;

procedure PopulateInfo(Child: TRSChild);
var
  TP: TStringArray;
  Temp: String;
  I: Integer;
begin
  ChildInfo.Visible := True;
  ChildInfo.CAPTION := '';

  SetLength(TP, 17);
  with Child do
  begin
    TP[0] := 'Name: ' + ToStr(Name);
    TP[1] := 'Text: ' + ToStr(Text);
    TP[2] := 'Actions: ' + ToStr(Actions);
    TP[3] := 'ID: ' + ToStr(ID);
    TP[4] := 'ParentID: ' + ToStr(Parent);
    TP[5] := 'TextureID: ' + ToStr(TextureID);
    TP[6] := 'ModelID: ' + ToStr(ModelID);
    TP[7] := 'ModelZoom: ' + ToStr(ModelZoom);
    TP[8] := 'RelativeX: ' + ToStr(RelativeX);
    TP[9] := 'RelativeY: ' + ToStr(RelativeY);
    TP[10] := 'X: ' + ToStr(X);
    TP[11] := 'Y: ' + ToStr(Y);
    TP[12] := 'Width: ' + ToStr(Width);
    TP[13] := 'Height: ' + ToStr(Height);
    TP[14] := 'Bounds: ' + ToStr(Bounds);
    TP[15] := 'Stack: ' + ToStr(Stack);
    TP[16] := 'IsHidden: ' + ToStr(IsHidden);
  end;

  for I := 0 to High(TP) do
    Temp := Temp + TP[i] + CRLF;

  ChildInfo.CAPTION := Temp;
end;

procedure DoAction;
var
  Temp: String;
  Child: TRSChild;
begin
  Temp := GetNumbers(InterfaceList.ITEMS[InterfaceList.ITEMINDEX]);
  case Level of
    1:begin
        CurrInterface.CAPTION := 'Interface: ' + Temp;
        LastClicked[0] := StrToInt(GetNumbers(Temp));
      end;
    2: begin
         Currchild.CAPTION := '|__Child: '+Temp;
         LastClicked[1] := StrToInt(GetNumbers(Temp));

         Child := R_GetRSChild(LastClicked[0], LastClicked[1]);
         SMART_DrawBoxEx(true, Child.Bounds, 16777215);

         PopulateInfo(Child);
       end;
    3: begin
         CurrComp.CAPTION := '|__Component: '+Temp;
         LastClicked[2] := StrToInt(GetNumbers(Temp));

         Child := R_GetRSComponent(LastClicked[0], LastClicked[1], LastClicked[2]);
         SMART_DrawBoxEx(true, Child.Bounds, 16777215);

         PopulateInfo(Child);
       end;
  end;
end;

procedure ActivateLevel(Sender: TObject);
var
  Ifaces: TIntegerArray;
  I: Integer;
begin
  SmartSetupEx(WORLD, MEMBERS, SIGNED, SUPERDETAIL);
  case Level of
    1:begin
        Level := 2;
        InterfaceList.CLEAR;
        IFaces := R_GetValidChildren(LastClicked[0]);

        for I := 0 to High(IFaces) do
        begin
          if(Length(R_GetValidComponents(LastClicked[0], IFaces[i])) > 0)then
            InterfaceList.ITEMS.Append(ToStr(IFaces[i]) + '...')
          else
            InterfaceList.ITEMS.Append(ToStr(IFaces[i]));
        end;

        CurrChild.Visible := True;
      end;
    2:begin
        Ifaces := R_GetValidComponents(LastClicked[0], LastClicked[1]);
        if(Length(IFaces) > 0)then
        begin
          Level := 3;
          InterfaceList.CLEAR;

          for I := 0 to High(IFaces) do
            InterfaceList.ITEMS.Append(ToStr(IFaces[i]));

          CurrComp.Visible := True;
        end;
      end;
  end;
end;

procedure OnClick(Sender : TObject);
var
  MyTile: TTile;
  ToAdd: String;
begin
  SmartSetupEx(WORLD, MEMBERS, SIGNED, SUPERDETAIL);
  case Sender of
    RefreshButton: RefreshList;
    InterfaceList: DoAction;
    CurrInterface: RefreshList;
    CurrChild: begin
      Level := 1;
      ActivateLevel(CurrChild);
    end;
  end;
end;

procedure SetupComponents;
begin
  SetLength(LastClicked, 3);
  Level := 1;

  RefreshButton := TButton.Create(ifaceExplorer);
  RefreshButton.Parent := ifaceExplorer;
  RefreshButton.SetBounds(10, 5, 190, 30);
  RefreshButton.CAPTION := 'Refresh';
  RefreshButton.ONCLICK := @OnClick;

  ListGroup := TGroupBox.Create(ifaceExplorer);
  ListGroup.Parent := ifaceExplorer;
  ListGroup.CAPTION := '';
  ListGroup.SetBounds(5, 95, 200, 345);

  InterfaceList := TListBox.Create(ListGroup);
  InterfaceList.Parent := ListGroup;
  InterfaceList.SetBounds(5, 3, 185, 314);
  InterfaceList.COLOR := 16777215;
  InterfaceList.FONT.Color := 5066061;
  InterfaceList.FONT.Name := 'Calibri';
  InterfaceList.FONT.Size := 12;
  InterfaceList.ONCLICK := @OnClick;
  InterfaceList.ONDBLCLICK := @ActivateLevel;

  CurrInterface := TLabel.Create(ifaceExplorer);
  CurrInterface.Parent := ifaceExplorer;
  CurrInterface.CAPTION := 'Interface: ';
  CurrInterface.FONT.Color := 5066061;
  CurrInterface.FONT.Name := 'Calibri';
  CurrInterface.FONT.Size := 14;
  CurrInterface.Top := 35;
  CurrInterface.ONCLICK := @OnClick;

  CurrChild := TLabel.Create(ifaceExplorer);
  CurrChild.Parent := ifaceExplorer;
  CurrChild.CAPTION := '|__Child: ';
  CurrChild.FONT.Color := 5066061;
  CurrChild.FONT.Name := 'Calibri';
  CurrChild.FONT.Size := 14;
  CurrChild.Top := 53;
  CurrChild.Left := 25;
  CurrChild.Visible := False;
  CurrChild.ONCLICK := @OnClick;

  CurrComp := TLabel.Create(ifaceExplorer);
  CurrComp.Parent := ifaceExplorer;
  CurrComp.CAPTION := '|__Component: ';
  CurrComp.FONT.Color := 5066061;
  CurrComp.FONT.Name := 'Calibri';
  CurrComp.FONT.Size := 14;
  CurrComp.Top := 71;
  CurrComp.Left := 50;
  CurrComp.Visible := False;

  InfoHousing := TScrollBox.Create(ifaceExplorer);
  InfoHousing.Parent := ifaceExplorer;
  InfoHousing.SetBounds(225, 102, 355, 335);

  ChildInfo := TLabel.Create(InfoHousing);
  ChildInfo.Parent := InfoHousing;
  ChildInfo.CAPTION := '';
  ChildInfo.FONT.Color := 5066061;
  ChildInfo.FONT.Name := 'Calibri';
  ChildInfo.FONT.Size := 12;
  ChildInfo.Top := 5;
  ChildInfo.Left := 10;
  ChildInfo.WORDWRAP := True;
  ChildInfo.Visible := False;

end;

procedure OpenForm;
begin
  ifaceExplorer := CreateForm;
  with ifaceExplorer do
  begin
    Left := 486;
    Top := 286;
    Width := 600;
    Height := 450;
    BorderIcons := [biSystemMenu, biMinimize];
    Caption := 'Interface Explorer';
    Color := clBtnFace;
    Font.Color := clWindowText;
    Font.Height := -11;
    Font.Name := 'MS Sans Serif';
    PixelsPerInch := 96;
    BorderStyle := bsSingle;
  end;

  SetupComponents;

  ifaceExplorer.ShowModal;
  ifaceExplorer.Free;
end;

var
  v : TVariantArray;

begin
  Smart_Members := MEMBERS;
  Smart_Server := WORLD;
  Smart_Signed := SIGNED;

  SetupSRL;
  SetupReflection;
  ThreadSafeCall('OpenForm',v);
  ClearRSCanvas(SMART_Canvas.canvas);
end.
