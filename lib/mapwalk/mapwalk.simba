//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    MMWalk Routines                           --||
//------------------------------------------------------------------//

{*******************************************************************************
function R_GetMinimapAngleDeg: extended;
By: BenLand100
Description: Returns the current Map angle in degrees. North: 0 deg, increases
             in the counter clockwise direction
*******************************************************************************}
function R_GetMinimapAngleDeg: extended;
begin
  result:= SmartGetFieldFloat(0, hook_static_MapAngle) * 45.0 / 2048.0;
end;

{*******************************************************************************
function R_GetMinimapAngleRad: extended;
By: BenLand100
Description: Returns the current map angle in radians. North: 0 rad, increases
             in the counter clockwise direction
*******************************************************************************}
function R_GetMinimapAngleRad: extended;
begin
  result:= SmartGetFieldFloat(0, hook_static_MapAngle) * pi / 8192.0;
end;

{*******************************************************************************
function R_GetCamPosX: integer;
By: lordsaturn
Description: Camera Position X
*******************************************************************************}
function R_GetCamPosX: integer;
begin
  Result := SmartGetFieldInt(0, hook_static_CamPosX);
end;

{*******************************************************************************
function R_GetCamPosY: integer;
By: lordsaturn
Description: Camera Position Y
*******************************************************************************}
function R_GetCamPosY: integer;
begin
  Result := SmartGetFieldInt(0, hook_static_CamPosY);
end;

{*******************************************************************************
function R_TileToMM(tile: TTile): TPoint;
By: BenLand100
Description: Converts the global tile position to a screen location on the
             minimap, taking map rotation into account.
*******************************************************************************}
function R_TileToMM(tile: TTile): TPoint;
var
  angle, x, y: extended;
  temp: TPoint;
begin
   angle:= -R_GetMinimapAngleRad;
   temp := R_GetMyPos();
   x:= (tile.x - temp.x) * 4 - 2;
   y:= (temp.y - tile.y) * 4 - 2;
   result.x:= round(x*cos(angle) + y*sin(angle)) + 628;
   result.y:= round(y*cos(angle) - x*sin(angle)) + 87;
end;

{*******************************************************************************
function R_TileOnMM(Tile: TTile): boolean;
By: Drags111
Description: Checks if the Tile is on the MM.
*******************************************************************************}
function R_TileOnMM(Tile: TTile): boolean;
var
  P: TPoint;
begin
  P := R_TileToMM(Tile);
  Result := rs_OnMinimap(P.x, P.y);
end;

{*******************************************************************************
function R_GetDest: TTile;
By: Drags111
Description: Results the tile of the Flag destination.
*******************************************************************************}
function R_GetDest: TTile;
var
  xDest, yDest: integer;
begin
  xDest := SmartGetFieldInt(0, hook_static_DestX);
  yDest := SmartGetFieldInt(0, hook_static_DestY);
  Result := R_Tile(xDest, yDest);
end;

{*******************************************************************************
function R_FlagExists: Boolean;
By: Drags111
Description: Results true if there is a flag.
*******************************************************************************}
function R_FlagExists: Boolean;
var
  xFlag: LongInt;
begin
  xFlag := SmartGetFieldInt(0, hook_static_DestX);
  Result := (xFlag) > -1;
end;

{*******************************************************************************
function R_DistanceTile(T, TT: TTile): Integer;
By: mormonman
Description: Returns the distance between two tiles.
*******************************************************************************}
function R_DistanceTile(T, TT: TTile): Integer;
begin
  Result := Distance(T.x, T.y, TT.X, TT.Y);
end;

{*******************************************************************************
function R_DistanceFromTile(TheTile: TTile): Integer;
By: Widget
Description: Returns the distance between your player and the tile.  (Tiles)
*******************************************************************************}
function R_DistanceFromTile(TheTile: TTile): Integer;
var
  MyPos: TTile;
begin
  MyPos := R_GetMyPos;
  Result := R_DistanceTile(MyPos, TheTile);
end;

{*******************************************************************************
function R_DistanceFromFlag: Integer;
By: Drags111
Description: Results the distance your char is from the flag.
*******************************************************************************}
function R_DistanceFromFlag: Integer;
var
  MyPos, FlagPos: TTile;
  Me: integer;
begin
  if not R_FlagExists then Exit;
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  MyPos.x := SmartGetFieldArrayInt(Me, hook_character_WalkQueueX, 0);
  MyPos.y := SmartGetFieldArrayInt(Me, hook_character_WalkQueueY, 0);
  FlagPos := R_GetDest;
  Result := Distance(MyPos.x, MyPos.y, FlagPos.x, FlagPos.y);
  SmartFreeObject(me);
end;

{*******************************************************************************
function R_RandomizeTile(Tile: TTile; rX, rY: Integer): TTile;
By: lordsaturn
Description: Randomizes a tile using rX and rY.
*******************************************************************************}
function R_RandomizeTile(Tile: TTile; rX, rY: Integer): TTile;
begin
  Result := Point(RandomRange(Tile.X-rX, Tile.X+rX),
                   RandomRange(Tile.Y-rY, Tile.Y+rY));
end;

{*******************************************************************************
function R_MakeCompass(Dir: string): Boolean;
By: Timer
Description: MakesCompass to degress set (Degress or n, e, s, w).
Uses reflection.
*******************************************************************************}
function R_MakeCompass(setAngle: Variant): Boolean;
var
  StartAngle, Angle, DirectionDeg, i: Extended;
  Bool : Boolean;
  Mark : Integer;
begin
  StartAngle := (R_GetMinimapAngleDeg);
  if(StartAngle < 0)Or(Not LoggedIn)then
    Exit;
  case varType(setAngle) of
    varString:
    begin
      case (LowerCase(setAngle)) of
        'n': DirectionDeg := -1;
        'w': DirectionDeg := 90;
        's': DirectionDeg := 180;
        'e': DirectionDeg := 270;
      end;
    end;
    varDouble, varSingle:
      DirectionDeg := setAngle;
  end;
  if((MinE(Abs(StartAngle - DirectionDeg), MinE(Abs(StartAngle - (DirectionDeg + 360)), Abs((StartAngle + 360) - DirectionDeg)))) <= 8.0)then
  begin
    Result := True;
    Exit;
  end;
  Bool := (Round((360 - StartAngle) + DirectionDeg) mod 360 > Round((StartAngle + 360) - DirectionDeg) mod 360);
  if(Bool)then
    KeyDown(VK_LEFT)
  else
    KeyDown(VK_RIGHT);
  Wait(Random(40));
  MarkTime(Mark);
  repeat
    Wait(16);
    Angle := R_GetMinimapAngleDeg;
    If ((TimeFromMark(Mark) > 6000)  and (i < 1.0)) or
       ((TimeFromMark(Mark) > 10000) and (i < 2.0)) or
       ((TimeFromMark(Mark) > 14000) and (i < 3.0)) then
      i := i + 1.0;
  until ((MinE(Abs(Angle - DirectionDeg), MinE(Abs(Angle - (DirectionDeg + 360)), Abs((Angle + 360) - DirectionDeg)))) <= (7.0 + i))
    or (TimeFromMark(Mark) > 14000)
    or (Angle < 0);
  if(Bool)then
    KeyUp(VK_Left)
  else
    KeyUp(VK_Right);
  Wait(Random(100) + 40);
  Result := ((MinE(Abs(Angle - DirectionDeg), MinE(Abs(Angle - (DirectionDeg + 360)), Abs((Angle + 360) - DirectionDeg)))) <= (7.0 + i));
end;

{*******************************************************************************
function R_WaitToMove(Timeout: integer): Boolean;
By: lordsaturn
Description: Waits for the local player to move with a timeout. Returns true if
moved, false if timed out.
*******************************************************************************}
function R_WaitToMove(Timeout: integer): Boolean;
var
  a, Speed: integer;
begin
  a := GetSystemTime;
  Speed := R_GetSpeed;
  while Speed < 1 do
  begin
    Speed := R_GetSpeed;
    if GetSystemTime - a > Timeout then Exit;
    Wait(100);
  end;
  Result := True;
end;

{*******************************************************************************
Procedure R_Flag;
By: ??
Description: Waits Till A COMPLETE Stop. (Not dependant on Flag hooks)
*******************************************************************************}
procedure R_Flag;

var
  Ticker: Integer;

begin
  Ticker := (GetSystemTime + 30000);
  if not R_WaitToMove(1500) then Exit;
  while (R_GetSpeed > 0) do
  begin
    Wait(10 + Random(10));
    if SRL_Procs[SRL_AntiBan] <> nil then
      SRL_Procs[SRL_AntiBan]();
    if (GetSystemTime > Ticker) then
      Exit;
  end;
  Wait(500 + Random(50));
end;

{*******************************************************************************
procedure R_FFlag(Distance: Integer);
By: ZephyrsFury
Description: Similar to the original except it uses Reflection.
*******************************************************************************}
procedure R_FFlag(Dist: Integer);

var
  Tx, Ty, m, d1, d2: Integer;
  D: TTile;

begin
  if not R_WaitToMove(1500) then Exit;
  if(Dist = 0)then
  begin
    R_Flag;
    Exit;
  end;
  while (R_FlagExists) do
  begin
    D := R_GetDest;
    d1 := R_DistanceFromFlag;
    if (d1 >= Dist) then
    begin
      if not (R_GetSpeed > 0) then Exit;
      Inc(m);
      Wait(100 + Random(30));
      if SRL_Procs[SRL_AntiBan] <> nil then
        SRL_Procs[SRL_AntiBan]();
      if (Random(100) = 0) then IdleTime(500, 1000, 0.01);
      if (m mod 100 = 0) then
        if (d1 = d2) then
        begin
          if (FindColor(Tx, Ty, 255, MMX1, MMY1, MMX2, MMY2)) then
            Mouse(Tx, Ty + 14, 0, 0, True)
          else
            Mouse(MMCX, MMCY, 0, 0, True);
        end else d2 := d1;
    end else Break;
  end;
end;

{*******************************************************************************
function R_WalkToTileEx(Tile: TTile; Randomness, FlagDist: Integer; UseFFlag: Boolean): Boolean;
By: Wizzup, TheGuyWhoGotOn, and Drags111
Description: Walks to the tile using minimap.
*******************************************************************************}
function R_WalkToTileEx(Tile: TTile; Randomness, FlagDist: Integer; UseFFlag: Boolean): Boolean;
var
   wTile: TPoint;
   t: Integer;
begin
  Result := False;
  Tile := R_RandomizeTile(Tile, Randomness, Randomness);
  wTile := R_TileToMM(Tile);
  if not rs_OnMiniMap(wTile.X, wTile.Y) then
    Exit;
  Mouse(wTile.x, wTile.y, 1, 1, true);
  Wait(RandomRange(80, 100));
  t := getsystemtime;
  if UseFFlag then R_FFlag(FlagDist);
  Result := (GetSystemTime - t) < 60000;
end;

{*******************************************************************************
function R_WalkToTile(Tile: TPoint; Randomness, FlagDist: Integer): Boolean;
By: Drags111
Description: Walks to the tile using minimap.
*******************************************************************************}
function R_WalkToTile(Tile: TPoint; Randomness, FlagDist: Integer): Boolean;
begin
  Result := R_WalkToTileEx(Tile, Randomness, FlagDist, true);
end;

{*******************************************************************************
function R_WalkPathEx(Path: TTileArray; Randomness: Integer; Inverted: Boolean): Boolean;
By: Drags111
Description: Walks the Path of TTileArray from start to finish in a human-like
  style. It looks for the next tile in path and clicks it as soon as it comes
  up on the screen, just like a legit player would. This does make it more
  beneficial to use paths where the tiles are closer together, so it seems more
  active. All personal preference.
  Path: The array of Tiles to use as the path.
  Randomness: The amount of variant you want when walking to tiles.
  Inverted: If you want it to reverse the path (Walk from end to start).
*******************************************************************************}
function R_WalkPathEx(Path: TTileArray; Randomness: Integer; Inverted: Boolean): Boolean;
var
  Index, Timer, Tries: Integer;
begin
  if Inverted then R_InvertTileArray(Path);
  while R_DistanceFromTile(Path[High(Path)]) > 5 do
  begin
    for Index := High(Path) downto -1 do
      if (Index > -1) and R_TileOnMM(Path[Index]) then
        Break;
    if (Index = -1) then Break;

    if R_WalkToTileEx(Path[Index], Randomness, 0, false) then
    begin
      Timer := (GetSystemTime + 30000);
      while R_DistanceFromTile(Path[Index]) > 5 do
      begin
        Wait(10 + Random(10));
        if SRL_Procs[SRL_AntiBan] <> nil then
          SRL_Procs[SRL_AntiBan]();

        if GetSystemTime > Timer then Break;
        if (R_GetSpeed = 0) or ((Index <> High(Path)) and (R_TileOnMM(Path[Index+1]))) then Break;
      end;

      if (not (R_DistanceFromTile(Path[Index]) <=5)) and
          ((Index <> High(Path)) and (not R_TileOnMM(Path[Index+1]))) then
        Inc(Tries);
    end else
    begin
      Inc(Tries);
      wait(100+Random(300));
    end;
    if Tries >= 10 then Break;
  end;
  Result := R_DistanceFromTile(Path[High(Path)]) <= 5;
  R_Flag;
end;

{*******************************************************************************
function R_WalkPath(Tiles: TTileArray): boolean;
By: Drags111
Description: Walks the tile path. Looks like an ugly function, but it works
             Beautifully.
*******************************************************************************}
function R_WalkPath(Path: TTileArray): boolean;
begin
  Result := R_WalkPathEx(Path, 3, false);
end;

{*******************************************************************************
Function R_WindPath(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended): TPointArray;
By: JuKKa
Description: Generates a blind path of points!
*******************************************************************************}
Function R_WindPath(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended): TPointArray;
var
  veloX, veloY, windX, windY, veloMag, dist, randomDist, lastDist, step: extended;
  lastX, lastY: integer;
  sqrt2, sqrt3, sqrt5: extended;
begin
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);
  while hypot(xs - xe, ys - ye) > 1 do
  begin
    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    if dist >= targetArea then
    begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
      if (maxStep < 3) then
      begin
        maxStep:= random(3) + 3.0;
      end else
      begin
        maxStep:= maxStep / sqrt5;
      end;
    end;
    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;
    if hypot(veloX, veloY) > maxStep then
    begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) / 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    end;
    lastX:= Round(xs);
    lastY:= Round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;
    SetArrayLength(Result, GetArrayLength(Result) + 1);
    Result[ High(Result) ] := Point(Round(xs), Round(ys));
    step:= hypot(xs - lastX, ys - lastY);
    lastdist:= dist;
  end;
end;

{*******************************************************************************
Function R_WebWalk(T: TTile): Boolean;
By: JuKKa
Description: Walks blindly using WindPath!
*******************************************************************************}
Function R_WebWalk(T: TTile): Boolean;
Var
  I: Integer;
  M, P: TPoint;
  CTRLPoints: TPointArray;
Begin
  P := R_TileToPoint(T);
  Repeat
    M := R_GetMyPos;
    CtrlPoints := r_WindPath(M.x, M.y, P.X, P.Y, 5.0, 2.5, 0.0, 0.0, 4.5, 2.5);
    For I:= High(CtrlPoints) DownTo 0 Do
      if R_WalkToTile(R_Tile(CtrlPoints[i].x, CtrlPoints[i].y),0, 10) Then
      Begin
        Result := I = High(CtrlPoints);
        Break;
      End;
  Until( Result );
End;
