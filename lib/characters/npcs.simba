//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    NPCs Routines                             --||
//------------------------------------------------------------------//

//---                      Records                                --//



{*******************************************************************************
function NULL_NPC: TNPC;
Description: Nulls a TNPC
*******************************************************************************}
function NULL_NPC: TNPC;
begin
  with Result do
  begin
    Tile := NULL_TILE;
    Name := NULL_STRING;
    Index := NULL_INT;
    Level := NULL_INT;
    ID := NULL_INT;
    Height := NULL_INT;
    Animation := NULL_INT;
    Motion := NULL_INT;
    HPRatio := NULL_INT;
    InCombat := False;
    WalkQueueX := NULL_INT;
    WalkQueueY := NULL_INT;
    Interacting := NULL_INT;
    Orientation := NULL_INT;
    Actions := [];
  end;
end;

{*******************************************************************************
Function R_SortNPCs(NPCs:array of TNPC):array of TNPC;
By: Widget edited by lordsaturn
Description: Sorts NPCs by distance from you.
*******************************************************************************}
function R_SortNPCs(NPCs:array of TNPC): TNPCArray;
var
  i,i2, L: integer;
  tpa: TPointArray;
begin
  L := GetArrayLength(NPCs);
  if L < 1 then Exit;
  SetArrayLength(TPA, L);
  SetArrayLength(Result, L);
  for i := 0 to L-1 do
    TPA[i] := NPCs[i].Tile;
  SortTPAFrom(TPA, R_GetMyPos);
  for i := 0 to L-1 do
    for i2 := 0 to L-1 do
      if (TPA[i].x=NPCs[i2].Tile.x) and (TPA[i].y=NPCs[i2].Tile.y) then
        Result[i] := NPCs[i2];
end;

{*******************************************************************************
function R_GetAllNPCs(Null: Boolean): TNPCArray;
By: Drags111
Description: Stores all the loaded NPCs into an array of TNPC. If Null = True
then it will include Null NPCs.
*******************************************************************************}
function R_GetAllNPCs(Null: Boolean):array of TNPC;
var
  I, C, NumNPCs, Index, TheNPC, TheNPCNode, NPCDef: integer;
  Base: TTile;
begin
  NumNPCs := Client.NPCCount();
  if (NumNPCs < 1) then Exit;
  SetArrayLength(Result, NumNPCs);
  for I := 0 to (NumNPCs-1) do
  try
    Index := Client.NPCIndexArray(I);
    TheNPCNode := Client.NPCNodes(I);
    TheNPC := SmartGetFieldObject(TheNPCNode, hook_npcnode_GetNPC);
    NPCDef := RSPNC_GetNPCDef(TheNPC);

    if(not Null) and (Lowercase(Trim(RSNPC_GetName(NPCDef))) = 'null')then
      continue;

    Result[C] := RSNPC_GetBaseInfo(TheNPC);
    Result[C].Index := Index;
    Inc(C);

  finally
    R_FreeObjects([TheNPCNode, TheNPC, NPCDef]);
  end;
  SetLength(Result, C);
end;

{*******************************************************************************
function R_GetNullNPCsByMulti(TheVarArr: TVariantArray):TNPCArray;
: Drags111/Naike/mormonman
Description: Returns the npc array by TheVarArr(IDs and names). Includes Null
npcs.
*******************************************************************************}
function R_GetNullNPCsMulti(TheVarArr: TVariantArray):TNPCArray;
var
  vType, i, resCounter, Hi, Hig, h: Integer;
  NPCs: TNPCArray;
  b: boolean;
begin
  NPCs := R_SortNPCs(R_GetAllNPCs(True));
  SetLength(Result, Length(NPCs));
  Hig := High(TheVarArr);
  Hi := High(NPCs);
  for i := 0 to Hi do
    for h := 0 to Hig do
    begin
      vType := VarType(TheVarArr[h]);
      if (vType = varString) then
        TheVarArr[h] := LowerCase(Trim(TheVarArr[h]));
      case vType of
        varInteger: B := NPCs[i].ID = TheVarArr[h];
        varString: B := (Pos(TheVarArr[h], LowerCase(Trim(NPCs[i].Name))) > 0);
        else Exit;
      end;
      if not B then
        Continue;
      Result[resCounter] := NPCs[i];
      inc(resCounter);
    end;

  SetLength(Result, resCounter);
end;

{*******************************************************************************
function R_GetNullNPCs(TheVar: Variant):TNPCArray;
By: Drags111/Naike/mormonman
Description: Returns the npc array by TheVar(ID or name). Includes Null npcs.
*******************************************************************************}
function R_GetNullNPCs(TheVar: Variant):TNPCArray;
begin
  Result := R_GetNullNPCsMulti([TheVar]);
end;

{*******************************************************************************
function R_GetNullNPCMulti(TheVarArr: TVariantArray):TNPC;
By: Drags111/Naike/mormonman
Description: Returns the npc by TheVarArr(IDs or names). Includes Null npcs.
*******************************************************************************}
function R_GetNullNPCMulti(TheVarArr: TVariantArray):TNPC;
var
  NPCs: TNPCArray;
begin
  Result := NULL_NPC;
  NPCs := R_GetNullNPCsMulti(TheVarArr);
  if Length(NPCs) < 1 then Exit;
  Result := NPCs[0];
end;

{*******************************************************************************
function R_GetNullNPC(TheVar: Variant):TNPC;
By: Drags111/Naike/mormonman
Description: Returns the npc by TheVar(ID or name). Includes Null npcs.
*******************************************************************************}
function R_GetNullNPC(TheVar: Variant):TNPC;
begin
  Result := R_GetNullNPCMulti([TheVar]);
end;

{*******************************************************************************
function R_GetNPCsMulti(TheVarArr: TVariantArray): TNPCArray;
By: Widget, lordsaturn, Narcle, Nava2 and mormonman
Description: Returns all the currently loaded NPCs using TheVarArr, which will
             take either strings or Integers. The String is a part of the NPC
             name, and an Integer is the NPCType (ID).
*******************************************************************************}
function R_GetNPCsMulti(TheVarArr: TVariantArray): TNPCArray;
var
  vType, i, resCounter, Hi, Hig, h: Integer;
  NPCs: TNPCArray;
  b: boolean;
begin
  {
    Initialize the result array, setup for looping.
  }
  NPCs := R_SortNPCs(R_GetAllNPCs(False));
  SetLength(Result, Length(NPCs));
  Hig := High(TheVarArr);
  Hi := High(NPCs);
  for i := 0 to Hi do
    for h := 0 to Hig do
    begin
      vType := VarType(TheVarArr[h]);
      if (vType = varString) then
        TheVarArr[h] := LowerCase(Trim(TheVarArr[h]));
      case vType of
        varInteger: B := NPCs[i].ID = TheVarArr[h];
        varString: B := (Pos(TheVarArr[h], LowerCase(Trim(NPCs[i].Name))) > 0);
        else Exit;
      end;
      if not B then
        Continue;
      Result[resCounter] := NPCs[i];
      inc(resCounter);
    end;

  SetLength(Result, resCounter);
end;

{*******************************************************************************
function R_GetNPCs(TheVar: Variant): TNPCArray;
By: Widget, lordsaturn, Narcle, Nava2 and mormonman
Description: Returns all the currently loaded NPCs using TheVar, which will
             take either a string or an Integer. The String is a part of the NPC
             name, and an Integer is the NPCType (ID).
*******************************************************************************}
function R_GetNPCs(TheVar: Variant): TNPCArray;
begin
  Result := R_GetNPCsMulti([TheVar]);
end;

{*******************************************************************************
function R_GetNPCMulti(TheVarArr: TVariantArray):TNPC;
By: Drags111/mormonman
Description: Returns the npc by TheVarArr (names or IDs).
*******************************************************************************}
function R_GetNPCMulti(TheVarArr: TVariantArray):TNPC;
var
  NPCs: TNPCArray;
begin
  Result := NULL_NPC;
  NPCs := R_GetNPCsMulti(TheVarArr);
  if Length(NPCs) < 1 then Exit;
  Result := NPCs[0];
end;

{*******************************************************************************
function R_GetNPC(TheVar: Variant):TNPC;
By: Drags111/mormonman
Description: Returns the npc by TheVar (name or ID).
*******************************************************************************}
function R_GetNPC(TheVar: Variant):TNPC;
begin
  Result := R_GetNPCMulti([TheVar]);
end;

{*******************************************************************************
function R_GetNPCsAt(T: TTile): TNPCArray;
By: Drags111
Description: Returns an array of the NPCs at the given tile
*******************************************************************************}
function R_GetNPCsAt(Tile: TTile): TNPCArray;
var
  I, h, c: Integer;
  Index, TheNPCNode, TheNPC: Integer;
  NPCTile : TTile;
begin
  H := Client.NPCCount();
  SetLength(Result, H);
  Dec(H);
  for I := 0 to H do
  try
    Index := Client.NPCIndexArray(I);
    TheNPCNode := Client.NPCNodes(I);
    TheNPC := SmartGetFieldObject(TheNPCNode, hook_npcnode_GetNPC);
    NPCTile := RSCharacter_GetTile(TheNPC);

    if (NPCTile = Tile) then
    begin
      Result[C] := RSNPC_GetBaseInfo(TheNPC);
      Result[C].Index := Index;
    end;
  finally
    R_FreeObjects([TheNPCNode, TheNPC]);
  end;
  SetLength(Result, C);
end;

{*******************************************************************************
function R_FindNPCsMulti(TheVarArr: Variant; var NPCs: TNPCArray): Boolean;
By: lordsaturn/mormonman
Description: If any NPC is found according to TheVarArr, the NPCs are placed in
the NPCs array. Results true if found; false otherwise.
*******************************************************************************}
function R_FindNPCsMulti(TheVarArr: TVariantArray; var NPCs: TNPCArray): Boolean;
begin
  NPCs := R_GetNPCsMulti(TheVarArr);
  if Length(NPCs) < 1 then Exit;
  Result := NPCs[0].ID > -1;
end;

{*******************************************************************************
function R_FindNPCs(TheVar: Variant; var NPCs: TNPCArray): Boolean;
By: lordsaturn/mormonman
Description: If the NPC is found according to TheVar, the NPC is placed in the
NPCs array. Results true if found; false otherwise.
*******************************************************************************}
function R_FindNPCs(TheVar: Variant; var NPCs: TNPCArray): Boolean;
begin
  Result := R_FindNPCsMulti([TheVar], NPCs);
end;

{*******************************************************************************
function R_FindNPCMulti(TheVarArr: Variant; var NPC: TNPC): Boolean;
By: lordsaturn/mormonman
Description: If the NPC is found according to TheVarArr, the NPC is placed in
the NPC variable. Results true if found; false otherwise.
*******************************************************************************}
function R_FindNPCMulti(TheVarArr: TVariantArray; var NPC: TNPC): Boolean;
begin
  NPC := R_GetNPCMulti(TheVarArr);
  Result := NPC.ID > -1;
end;

{*******************************************************************************
function R_FindNPC(TheVar: Variant; var NPC: TNPC): Boolean;
By: lordsaturn/mormonman
Description: If the NPC is found according to TheVar, the NPC is placed in the
NPC variable. Results true if found; false otherwise.
*******************************************************************************}
function R_FindNPC(TheVar: Variant; var NPC: TNPC): Boolean;
begin
  Result := R_FindNPCMulti([TheVar], NPC);
end;

{*******************************************************************************
function R_ValidNullNPCMulti(TheVarArr: TVariantArray): Boolean;
By: Drags111/Naike/mormonman
Description: Returns true if npc designated by TheVarArr(names or IDs) is found.
*******************************************************************************}
function R_ValidNullNPCMulti(TheVarArr: TVariantArray): Boolean;
var
  vType, i, Hi, Hig, h: Integer;
  NPCs: TNPCArray;
begin
  NPCs := R_SortNPCS(R_GetAllNPCs(True));
  Hi := High(NPCs);
  Hig := High(TheVarArr);
  for i := 0 to Hi do
    for h := 0 to Hig do
    begin
      vType := VarType(TheVarArr[h]);
      if (vType = varString) then
        TheVarArr[h] := LowerCase(Trim(TheVarArr[h]));
      case vType of
        varInteger: Result := NPCs[i].ID = TheVarArr[h];
        varString: Result := (Pos(TheVarArr[h], LowerCase(Trim(NPCs[i].Name))) > 0);
        else Exit;
      end;
      if Result then Exit;
    end;
end;

{*******************************************************************************
function R_ValidNullNPC(ID: Integer): Boolean;
By: Drags111/Naike/mormonman
Description: Returns true if npc designated by TheVar(name or ID) is found.
*******************************************************************************}
function R_ValidNullNPC(TheVar: Variant): Boolean;
begin
  Result := R_ValidNullNPCMulti([TheVar]);
end;

{*******************************************************************************
function R_ValidNPC(TheVar: Variant): Boolean;
By: lordsaturn
Description: Results true if the npc is found
*******************************************************************************}
function R_ValidNPC(TheVar: Variant): Boolean;
var
  NPC: TNPC;
begin
  Result := R_FindNPC(TheVar, NPC);
end;

{*******************************************************************************
procedure R_DumpNPCs(NPCs: TNPCArray);
By: Drags111
Description: Prints out the array of NPCs. Mainly for debugging purposes.
*******************************************************************************}
procedure R_DumpNPCs(NPCs: TNPCArray);
var
  I: Integer;
begin
  for I := 0 to High(NPCs) do
    with NPCs[I] do
    begin
      Writeln('NPC: ' + Name);
      Writeln('    Tile: ' + ToStr(Tile));
      Writeln('    ID: ' + ToStr(ID));
      Writeln('    Index: ' + ToStr(Index));
      Writeln('    Combat Level: ' + ToStr(Level));
      Writeln('    Height: ' + ToStr(Height));
      Writeln('    Animation: ' + ToStr(Animation));
      Writeln('    Motion: ' + ToStr(Motion));
      Writeln('    HPRatio: ' + ToStr(HPRatio));
      Writeln('    InCombat: ' + ToStr(InCombat));
      Writeln('    WalkQueueX: ' + ToStr(WalkQueueX));
      Writeln('    WalkQueueY: ' + ToStr(WalkQueueY));
      Writeln('    Interacting: ' + ToStr(Interacting));
      Writeln('    Orientation: ' + ToStr(Orientation));
      Writeln('    Actions: '+ ToStr(Actions));
    end;
end;
