(*
R_Debug
~~~~~~~

.. code-block:: pascal

    procedure R_Debug(Debug, InTags: String);

Writes debug notes if R_UseDebug is true. (By default it is true, but you can
turn it off by setting R_UseDebug to false AFTER SetupReflection.

.. note::

  by Drags111

*)
procedure R_Debug(Debug, InTags: String);
begin
  if R_SuppressDebug then Exit;
  If (InTags = '') then
    Writeln('[Reflection] ' + Debug)
  else
    Writeln('[' + InTags + '] ' + Debug);
end;

(*
R_TrimHTML
~~~~~~~~~~

.. code-block:: pascal

    function R_TrimHTML(S : string): string;

Removes the HTML junk from a string.

.. note::

  by lordsaturn, pyroryan

*)
function R_TrimHTML(S : string): string;
var
  P, P2, PLength: integer;
  Temp: string;
begin
  P := Pos('<', S);
  P2 := Pos('>', S);
  Result := S;
  PLength := P2 - P + 1;
  while (P <> 0) and (P2 <> 0) do
  begin
    Delete(Result, P, PLength);
    P := Pos('<', Result);
    Temp := Result;
    Delete(Temp, 1, P - 1);
    PLength := Pos('>', Temp);
  end;
end;

(*
R_GetJavaString
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetJavaString(javaString: integer; maxLength: integer): string;

Returns a string from a javaString with a specified  maxLength. Do not let it
overflow, bad things will happen.

.. note::

  by BenLand100

*)
function R_GetJavaString(javaString: integer; maxLength: integer): string;
begin
  SetLength(result, maxLength);
  SetLength(result, SmartStringFromString(javaString, result));
  Result := Replace(Result, 'Ã‚', '');
  Result := Replace(Result, #160, #32);
end;

(*
R_GetMyPos
~~~~~~~~~~

.. code-block:: pascal

    function R_GetMyPos: TTile;

Returns your current tile.

.. note::

  by Benland100

*)
function R_GetMyPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := SmartGetFieldInt(0, hook_static_BaseX) + SmartGetFieldInt(Me, hook_animable_PixelX) / 512;
  Result.y := SmartGetFieldInt(0, hook_static_BaseY) + SmartGetFieldInt(Me, hook_animable_PixelY) / 512;
  SmartFreeObject(Me);
end;

(*
R_GetMyLocPos
~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetMyLocPos: TTile;

Returns your local position.

.. note::

  by Benland100

*)
function R_GetMyLocPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := (SmartGetFieldInt(Me, hook_animable_PixelX) - SmartGetFieldInt(0, hook_static_BaseX)) / 512;
  Result.y := (SmartGetFieldInt(Me, hook_animable_PixelY) - SmartGetFieldInt(0, hook_static_BaseY)) / 512;
  SmartFreeObject(Me);
end;

(*
R_GetSettingArray
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSettingArray: TIntegerArray;

Retrives the Settings array from the client.

.. note::

  by Drags111

*)
function R_GetSettingArray: TIntegerArray;
var
  SettingArray, Data, DL, i: Integer;
begin
  try
    SettingArray := SmartGetFieldObject(0, hook_static_Settings);
    Data := SmartGetFieldObject(SettingArray, hook_settingarray_Data);

    DL := SmartGetFieldArraySize(Data, '', 1);
    SetLength(Result, DL);
    for i := 0 to DL-1 do
      Result[i] := SmartGetFieldArrayInt(data, '', i);
  finally
    SmartFreeObject(Data);
    SmartFreeOBject(SettingArray);
  end;
end;

(*
R_GetSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSetting(Setting: Integer): Integer;

Gets the setting value at the specified index.

.. note::

  by Drags111

*)
function R_GetSetting(Setting: Integer): Integer;
var
  SA: TIntegerArray;
begin
  SA := R_GetSettingArray;
  if(Setting < Length(SA))then
    Result := SA[Setting]
  else
  begin
    R_Debug('Incorrect setting index passed to GetSetting', 'R_GetSetting');
    Result := -1;
  end;
end;

(*
R_LoggedIn
~~~~~~~~~~

.. code-block:: pascal

    function R_LoggedIn: Boolean;

Returns true if you're logged in.

.. note::

  by Method, drags111, Zyt3x

*)
function R_LoggedIn: Boolean;
var
  LoginIndex: Integer;
begin
  LoginIndex := SmartGetFieldInt(0, hook_static_LoginIndex);
  Result := (LoginIndex = 10) or (LoginIndex = 11);
end;
