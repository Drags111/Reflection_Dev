(*
Interfaces
==========

The Interfaces include contains routines regarding interfaces in the game
such as the inventory, bank, some randoms, etc.

Hierarchy for Interfaces are as follows:

  Interface
        |
     Child [or TChild]
           |
         Component [Or TChildComponent]
*)

(*
R_GetChildRef
~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetChildRef(ParentI, ChildI: Integer): Integer;

Returns the object reference of InterfaceCache[ParentI][ChildI].

.. note::

  by Bobarkinator

*)
function R_GetChildRef(ParentI, ChildI: Integer): Integer;
begin
  Result := SmartGetFieldArray2DObject(0, hook_static_GetInterfaces, ParentI, ChildI);
end;

(*
R_GetComponentRef
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetComponentRef(Parent, Child, Component: Integer): Integer;

Returns the object reference of InterfaceCache[ParentI][ChildI][ComponentI].

.. note::

  by Drags111

*)
function R_GetComponentRef(ParentI, ChildI, ComponentI: Integer): Integer;
var
  Child: Integer;
begin
  try
    Child := R_GetChildRef(ParentI, ChildI);
    Result := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, ComponentI);
  finally
    R_FreeObject(Child);
  end;
end;

(*
R_ValidInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_ValidInterface(Index: Integer): Boolean;

Returns true if the interface is valid.

.. note::

  by Drags111

*)
function R_ValidInterface(Index: Integer): Boolean;
begin
  Result := Client.ValidInterfaces(Index);
end;

(*
R_GetValidInterfaces
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidInterfaces: TIntegerArray;

Returns an array of all the valid interfaces.

.. note::

  by Drags111

*)
function R_GetValidInterfaces: TIntegerArray;
var
  Interfaces, IL, I, C: integer;
begin
  try
    Interfaces := Client.Interfaces();
    IL := SmartGetFieldArraySize(Interfaces, '', 1);
    SetLength(Result, IL);

    for I := 0 to IL-1 do
    begin
      if(R_ValidInterface(I))then
      begin
        Result[C] :=I;
        Inc(C);
      end;
    end;

    SetLength(Result, C);
  finally
    R_FreeObject(Interfaces);
  end;
end;

(*
R_GetValidChildren
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidChildren(ParentI : Integer): TIntegerArray;

Returns all the children in the parent interface.

.. note::

  by pyroryan

*)
function R_GetValidChildren(ParentI : Integer): TIntegerArray;
var
  Interfaces, C, Child: Integer;
begin
  try
    Interfaces := Client.Interfaces();
    C := 0;
    Child := R_GetChildRef(ParentI, C);
    while not (SmartIsNull(Child)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      R_FreeObject(Child);
      Child := R_GetChildRef(ParentI, C);
    end;
    SetLength(Result, C);
  finally
    R_FreeObjects([Interfaces, Child]);
  end;
end;

(*
R_GetValidComponents
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;

Returns all the components in the parent-->child interface.

.. note::

  by mormonman

*)
function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;
var
  Child, C, Component: Integer;
begin
  try
    Child := R_GetChildRef(ParentI, ChildI)
    if SmartIsNull(Child) then
      Exit;
    C := 0;
    Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    while not (SmartIsNull(Component)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      R_FreeObject(Component);
      Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    end;
    SetLength(Result, C);
  finally
    R_FreeObjects([Component, Child]);
  end;
end;

(*
R_GetRSChild
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetRSChild(ParentI, ChildI: Integer): TRSChild;

Gets all Interface -> Child information and stores in a TRSChild.

.. note::

  by Drags111

*)
function R_GetRSChild(ParentI, ChildI: Integer): TRSChild;
var
  Child: Integer;
begin
  if not(R_ValidInterface(ParentI))then
  begin
    R_Debug('Interface '+ToStr(ParentI)+' isn''t valid.', 'R_GetRSChild');
    Exit;
  end;
  try
    Child := R_GetChildRef(ParentI, ChildI);
    Result := RSChild_GetBaseInfo(Child);
  finally
    R_FreeObject(Child);
  end;
end;

(*
R_GetRSComponent
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetRSComponent(ParentI, ChildI, ComponentI: Integer): TRSComponent;

Gets all Interface -> Child -> Component information and stores in a
TRSComponent.

.. note::

  by Drags111

*)
function R_GetRSComponent(ParentI, ChildI, ComponentI: Integer): TRSComponent;
var
  Component: Integer;
begin
  if not(R_ValidInterface(ParentI))then
  begin
    R_Debug('Interface '+ToStr(ParentI)+' isn''t valid.', 'R_GetRSComponent');
    Exit;
  end;
  try
    Component := R_GetComponentRef(ParentI, ChildI, ComponentI);
    Result := RSChild_GetBaseInfo(Component);
  finally
    R_FreeObject(Component);
  end;
end;

(*
R_GetInterfaceText
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceText(ParentI, ChildI: Integer): String;

Returns the Interface -> Child's text.

.. note::

  by Method

*)
function R_GetInterfaceText(ParentI, ChildI: Integer): String;
var
   Text, Child: Integer;
begin
  Child := R_GetChildRef(ParentI, ChildI);
  Text := SmartGetFieldObject(Child, hook_interface_GetText);
  Result := R_GetJavaString(Text, 512);
  R_FreeObjects([Text, Child]);
end;

(*
R_MouseChild
~~~~~~~~~~~~

.. code-block:: pascal

    procedure R_MouseChild(Child: TRSChild; ClickType: Integer);

Moves the mouse to and (depending on the ClickType) will click the interface
child/component. The ClickType follows the same rule as MouseBox:
  1: Left Click
  2: Right Click
  3: No Click
Works for both TRSChild and TRSComponent

.. note::

  by Drags111

*)
procedure R_MouseChild(Child: TRSChild; ClickType: Integer);
begin
  MouseBox(Child.X, Child.Y, Child.Bounds.X2, Child.Bounds.Y2, ClickType);
end;
