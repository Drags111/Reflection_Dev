(*
Interfaces
==========

The Interfaces include contains routines regarding interfaces in the game
such as the inventory, bank, some randoms, etc.

Hierarchy for Interfaces are as follows:

  Interface
        |
     Child [or TChild]
           |
         Component [Or TChildComponent]
*)

(*
R_ValidInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_ValidInterface(idx: Integer): Boolean;

Returns true if the interface is valid.

.. note::

  by Drags111

*)
function R_ValidInterface(idx: Integer): Boolean;
begin
  Result := SmartGetFieldArrayBoolean(0, hook_static_ValidInterfaces, idx);
end;

(*
R_GetChildRef
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetChildRef(Parent, Child: Integer): Integer;

Returns the child cache of InterfaceCache[Index][ChildIndex].

.. note::

  by Bobarkinator

*)
function R_GetChildRef(Parent, Child: Integer): Integer;
begin
  if not R_ValidInterface(Parent) then
    Result := -1;
  Result := SmartGetFieldArray2DObject(0, hook_static_GetInterfaces, Parent, Child);
end;

(*
R_GetComponentRef
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetComponentRef(Index, ChildIndex, Component: Integer): Integer;

Returns the component cache of the child.

.. note::

  by Drags111

*)
function R_GetComponentRef(Parent, Child, Component: Integer): Integer;
var
  ChildCache: Integer;
begin
  if not R_ValidInterface(Parent) then
    Result := -1;
  try
    ChildCache := R_GetChildRef(Parent, Child);
    Result := SmartGetFieldArrayObject(ChildCache, hook_interface_GetChildren, Component);
  finally
    R_FreeObject(ChildCache);
  end;
end;

{*******************************************************************************
function R_GetValidInterfaces: TIntegerArray;
By: Drags111
Description: Returns an array of all the valid interfaces.
*******************************************************************************}
function R_GetValidInterfaces: TIntegerArray;
var
  Interfaces, IL, I, C: integer;
begin
  try
    Interfaces := SmartGetFieldObject(0, hook_static_GetInterfaces);
    IL := SmartGetFieldArraySize(Interfaces, '', 1);
    SetLength(Result, IL);

    for I := 0 to IL-1 do
    begin
      if(R_ValidInterface(I))then
      begin
        Result[C] :=I;
        Inc(C);
      end;
    end;

    SetLength(Result, C);
  finally
    R_FreeObject(Interfaces);
  end;
end;

{*******************************************************************************
function R_GetValidChildren(Parent : Integer): TIntegerArray;
By: pyroryan/Drags111
Description: Returns all the components in the parent interface.
*******************************************************************************}
function R_GetValidChildren(ParentI : Integer): TIntegerArray;
var
  Interfaces, C, Child: Integer;
begin
  try
    Interfaces := SmartGetFieldObject(0, hook_static_GetInterfaces);
    C := 0;
    Child := R_GetChildRef(ParentI, C);
    while not (SmartIsNull(Child)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      R_FreeObject(Child);
      Child := R_GetChildRef(ParentI, C);
    end;
    SetLength(Result, C);
  finally
    R_FreeObjects([Interfaces, Child]);
  end;
end;

{*******************************************************************************
function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;
By: mormonman/Drags111
Description: Returns all the components in the parent-->child interface.
*******************************************************************************}
function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;
var
  Child, C, Component: Integer;
begin
  try
    Child := R_GetChildRef(ParentI, ChildI)
    if SmartIsNull(Child) then
      Exit;
    C := 0;
    Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    while not (SmartIsNull(Component)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      R_FreeObject(Component);
      Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    end;
    SetLength(Result, C);
  finally
    R_FreeObjects([Component, Child]);
  end;
end;

{*******************************************************************************
function R_ValidInterfaceInArray(Interfaces: TIntegerArray): Boolean;
By: Drags111
Description: Returns true if any interfaces in InterfaceArray are valid.
*******************************************************************************}
function R_ValidInterfaceInArray(Interfaces: TIntegerArray): Boolean;
var
  I : Integer;
  ValidInterfaces: TIntegerArray;
begin
  Result := False;
  ValidInterfaces := R_GetValidInterfaces;
  for I:=0 to High(Interfaces) do
    if(InIntArray(ValidInterfaces, Interfaces[I]))then
    begin
      Result := True;
      Exit;
    end;
end;

{*******************************************************************************
function R_GetActions(Parent, Child, Component: Integer): TStringArray;
By: Drags111
Description: Returns a String array of all the Actions the interface is capable
of (the menu option actions). If it's not a component then make Component -1.
*******************************************************************************}
function R_GetActions(Parent, Child, Component: Integer): TStringArray;
var
  Inter, NumActions, i, Action, c: Integer;
  Temp: String;
begin
  try
    if(Component > -1)then
      Inter := R_GetComponentRef(Parent, Child, Component)
    else
      Inter := R_GetChildRef(Parent, Child);

    NumActions := SmartGetFieldArraySize(Inter, Hook_Interface_GetActions, 1);
    if (NumActions <= 0)then
      Exit;
    c := 0;

    SetLength(Result, NumActions);
    for i := 0 to NumActions-1 do
    begin
      try
        Action := SmartGetFieldArrayObject(Inter, hook_interface_GetActions, i);
        if(Action = 0)then
          continue;
        Temp := R_TrimHTML(R_GetJavaString(Action, 256));
        if(Temp <> '')then
        begin
          Result[c] := Temp;
          Inc(c);
        end;
      finally
        SmartFreeObject(Action);
      end;
    end;
  finally
    SetLength(Result, c);
    SmartFreeObject(Inter);
  end;
end;

{*******************************************************************************
Function R_GetChildRefText(ParentI, ChildI: Integer): String;
By: Method
Description: Returns the Child's text.
*******************************************************************************}
function R_GetChildRefText(ParentI, ChildI: Integer): String;
var
   Text, Child: Integer;
begin
  Child := R_GetChildRef(ParentI, ChildI);
  Text := SmartGetFieldObject(Child, hook_interface_GetText);
  Result := R_GetJavaString(Text, 255);
  SmartFreeObject(Text);
  SmartFreeObject(Child);
end;

{*******************************************************************************
function R_GetChild(ParentI, ChildI: Integer): TRSChild;
By: Drags111
Description: Gets all Interface Child information and stores in a TChild.
*******************************************************************************}
function R_GetChild(ParentI, ChildI: Integer): TRSChild;
var
  Child, i, Name: Integer;
  P: TPoint;
begin
  try
    Child := R_GetChildRef(ParentI, ChildI);

    try
      Name := SmartGetFieldObject(Child, hook_interface_GetComponentName);
      Result.Name := R_TrimHTML(R_GetJavaString(Name, 256));
    finally
      R_FreeObject(Name);
    end;

    with Result do
    begin
      Actions := R_GetActions(ParentI, ChildI, -1);
      ID := SmartGetFieldInt(Child, hook_interface_GetComponentID);
      Stack := SmartGetFieldInt(Child, hook_interface_GetComponentStackSize);
      Text := R_GetChildRefText(ParentI, ChildI);
      TextureID := SmartGetFieldInt(Child, hook_interface_GetTextureID);
      ModelID := SmartGetFieldInt(Child, hook_interface_GetModelID);
      ModelZoom := SmartGetFieldInt(Child, hook_interface_GetModelZoom);
      RelativeX := SmartGetFieldInt(Child, hook_interface_GetX);
      RelativeY := SmartGetFieldInt(Child, hook_interface_GetY);
      Width := SmartGetFieldInt(Child, hook_interface_GetWidth);
      Height := SmartGetFieldInt(Child, hook_interface_GetHeight);
      IsHidden := SmartGetFieldBoolean(Child, hook_interface_IsHidden);
      Parent := SmartGetFieldInt(Child, hook_interface_GetParent);
      VScrollSize := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarSize);
      VScrollPosition := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarPosition);
      VThumbSize := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarThumbSize);
      HScrollSize := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarSize);
      HScrollPosition := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarPosition);
      HThumbSize := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarThumbSize);
      BoundsArrayIndex := SmartGetFieldInt(Child, hook_interface_GetBoundsArrayIndex);
    end;

    //P := R_GetAbsolutePos(ParentI, ChildI, -1);
    Result.Bounds := IntToBox(P.x, P.y, P.x+Result.Width, P.y+Result.Height);
    Result.X := P.x;
    Result.Y := P.y;
  finally
    R_FreeObject(Child);
  end;
end;

{*******************************************************************************
function R_GetChildComponent(ParentI, ChildI, CompI: Integer): TChildComponent;
By: Drags111
Description: Gets all Interface Component information and stores in a
  TChild.
*******************************************************************************}
function R_GetChildComponent(ParentI, ChildI, CompI: Integer): TRSComponent;
var
  Component, Text, Name: Integer;
  P: TPoint;
begin
  try
    Component := R_GetComponentRef(ParentI, ChildI, CompI);
    try
      Name := SmartGetFieldObject(Component, hook_interface_GetComponentName);
      Text := SmartGetFieldObject(Component, hook_interface_GetText);
      Result.Name := R_TrimHTML(R_GetJavaString(Name, 255));
      Result.Text := R_TrimHTML(R_GetJavaString(Text, 255));
    finally
      SmartFreeObject(Name);
      SmartFreeObject(Text);
    end;

    Result.Actions := R_GetActions(ParentI, ChildI, CompI);
    Result.ID := SmartGetFieldInt(Component, hook_interface_GetComponentID);
    Result.Stack := SmartGetFieldInt(Component, hook_interface_GetComponentStackSize);
    Result.TextureID := SmartGetFieldInt(Component, hook_interface_GetTextureID);
    Result.ModelID := SmartGetFieldInt(Component, hook_interface_GetModelID);
    Result.ModelZoom := SmartGetFieldInt(Component, hook_interface_GetModelZoom);
    Result.RelativeX := SmartGetFieldInt(Component, hook_interface_GetX);
    Result.RelativeY := SmartGetFieldInt(Component, hook_interface_GetY);
    Result.Width := SmartGetFieldInt(Component, hook_interface_GetWidth);
    Result.Height := SmartGetFieldInt(Component, hook_interface_GetHeight);
    Result.IsHidden := SmartGetFieldBoolean(Component, hook_interface_IsHidden);
    Result.Parent := SmartGetFieldInt(Component, hook_interface_GetParent);
    //P := R_GetAbsolutePos(ParentI, ChildI, CompI);
    Result.Bounds := IntToBox(P.x, P.y, P.x+Result.Width, P.y+Result.Height);
    Result.X := P.x;
    Result.Y := P.y;
  finally
    SmartFreeObject(Component);
  end;
end;
