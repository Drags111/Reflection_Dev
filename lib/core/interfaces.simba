(*
Interfaces
==========

The Interfaces include contains routines regarding interfaces in the game
such as the inventory, bank, some randoms, etc.

Hierarchy for Interfaces are as follows:

  Interface
        |
     Child [or TChild]
           |
         Component [Or TChildComponent]
*)

(*
R_GetInterfaceChildRef
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetChildRef(ParentI, ChildI: Integer): Integer;

Returns the object reference of InterfaceCache[ParentI][ChildI].

.. note::

  by Bobarkinator

*)
function R_GetInterfaceChildRef(ParentI, ChildI: Integer): Integer;
begin
  Result := SmartGetFieldArray2DObject(0, hook_static_GetInterfaces, ParentI, ChildI);
end;

(*
R_GetInterfaceComponentRef
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetComponentRef(Parent, Child, Component: Integer): Integer;

Returns the object reference of InterfaceCache[ParentI][ChildI][ComponentI].

.. note::

  by Drags111

*)
function R_GetInterfaceComponentRef(ParentI, ChildI, ComponentI: Integer): Integer;
var
  Child: Integer;
begin
  try
    Child := R_GetInterfaceChildRef(ParentI, ChildI);
    Result := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, ComponentI);
  finally
    SmartFreeObject(Child);
  end;
end;

(*
R_ValidInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_ValidInterface(Index: Integer): Boolean;

Returns true if the interface is valid.

.. note::

  by Drags111

*)
function R_ValidInterface(Index: Integer): Boolean;
begin
  Result := SmartGetFieldArrayBoolean(0, hook_static_ValidInterfaces, Index);
end;

(*
R_GetValidInterfaces
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidInterfaces: TIntegerArray;

Returns an array of all the valid interfaces.

.. note::

  by Drags111

*)
function R_GetValidInterfaces: TIntegerArray;
var
  Interfaces, IL, I, C: integer;
begin
  try
    Interfaces := SmartGetFieldObject(0, hook_static_GetInterfaces);
    IL := SmartGetFieldArraySize(Interfaces, '', 1);
    SetLength(Result, IL);

    for I := 0 to IL-1 do
    begin
      if(R_ValidInterface(I))then
      begin
        Result[C] :=I;
        Inc(C);
      end;
    end;

    SetLength(Result, C);
  finally
    SmartFreeObject(Interfaces);
  end;
end;

(*
R_GetValidChildren
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidChildren(ParentI : Integer): TIntegerArray;

Returns all the children in the parent interface.

.. note::

  by pyroryan

*)
function R_GetValidChildren(ParentI : Integer): TIntegerArray;
var
  Interfaces, C, Child: Integer;
begin
  try
    Interfaces := SmartGetFieldObject(0, hook_static_GetInterfaces);
    C := 0;
    Child := R_GetInterfaceChildRef(ParentI, C);
    while not (SmartIsNull(Child)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      SmartFreeObject(Child);
      Child := R_GetInterfaceChildRef(ParentI, C);
    end;
    SetLength(Result, C);
  finally
    SmartFreeObject(Interfaces);
    SmartFreeObject(Child);
  end;
end;

(*
R_GetValidComponents
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;

Returns all the components in the parent-->child interface.

.. note::

  by mormonman

*)
function R_GetValidComponents(ParentI, ChildI: Integer): TIntegerArray;
var
  Child, C, Component: Integer;
begin
  try
    Child := R_GetInterfaceChildRef(ParentI, ChildI)
    if SmartIsNull(Child) then
      Exit;
    C := 0;
    Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    while not (SmartIsNull(Component)) do
    begin
      SetArrayLength (Result, C+1);
      Result[C] := C;
      Inc(C);
      SmartFreeObject(Component);
      Component := SmartGetFieldArrayObject(Child, hook_interface_GetChildren, C);
    end;
    SetLength(Result, C);
  finally
    SmartFreeObject(Component);
    SmartFreeObject(Child);
  end;
end;

(*
R_GetInterfaceParentID
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceParentID(Obj: Integer): Integer;

Gets the ID of the parent of the specified interface. Used for absolute
positioning.

.. note::

  by Drags111

*)
function R_GetInterfaceParentID(Obj: Integer): Integer;
var
  ParentID, MainID, InterfaceNC, Nodes, Tail, Node, ID, Next : Integer;
  NodesSize, index : Integer;
begin
  ParentID := SmartGetFieldInt(Obj, hook_interface_GetParentID);
  if (ParentID <> -1) then
  begin
    Result := ParentID;
    Exit;
  end;
  MainID := trunc(SmartGetFieldInt(Obj, hook_interface_GetID) div 65536);
  InterfaceNC := SmartGetFieldObject(0, hook_static_InterfaceNC);
  if (InterfaceNC = 0) then
    Exit;
  Nodes := SmartGetFieldObject(InterfaceNC, hook_nodecache_GetNodes);
  NodesSize := SmartGetFieldArraySize(Nodes, '', 1);
  SmartFreeObject(InterfaceNC);
  for Index := 0 to (NodesSize - 1) do
  begin
    Tail := SmartGetFieldArrayObject(Nodes, '', Index);
    Node := SmartGetFieldObject(Tail, hook_node_Next);
    while (not (SmartIsEqual(Tail, Node))) do
    begin
      ID := SmartGetFieldInt(Node, hook_interfacenode_GetID);
      if (MainID = ID) then
      begin
        Result := SmartGetFieldLongL(Node, hook_node_GetID);
        SmartFreeObject(Next);
        SmartFreeObject(Node);
        SmartFreeObject(Nodes);
        SmartFreeObject(Tail);
        Exit;
      end;
      Next := SmartGetFieldObject(Node, hook_node_Next);
      SmartFreeObject(Node);
      Node := Next;
    end;
  end;
  SmartFreeObject(Next);
  SmartFreeObject(Node);
  SmartFreeObject(Nodes);
  SmartFreeObject(Tail);
end;

(*
R_GetAbsoluteInterfacePos
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetAbsoluteInterfacePos(Obj: Integer): TPoint;

Gets the absolute coordinaces of an interface.

.. note::

  by Drags111

*)
function R_GetAbsoluteInterfacePos(Obj: Integer): TPoint;
var
  X, Y, ParentID, BoundIndex: Integer;
  ParentObj, Bounds: Integer;
  ParentPoint: TPoint;
begin
  X := SmartGetFieldInt(Obj, hook_interface_GetX);
  Y := SmartGetFieldInt(Obj, hook_interface_GetY);
  ParentID := R_GetInterfaceParentID(Obj);

  if(ParentID > 0)then
  begin
    try
      ParentObj := SmartGetFieldArray2DObject(0, hook_static_GetInterfaces, ParentID shr 16, ParentID and $FFFF);

      ParentPoint := R_GetAbsoluteInterfacePos(ParentObj);

      X := X + ParentPoint.x;
      Y := Y + ParentPoint.y;

      if(SmartGetFieldInt(ParentObj, hook_interface_GetHorizontalScrollBarSize) <> 0)then
        X := X - SmartGetFieldInt(ParentObj, hook_interface_GetHorizontalScrollBarPosition);
      if(SmartGetFieldInt(ParentObj, hook_interface_GetVerticalScrollBarSize) <> 0)then
        Y := Y - SmartGetFieldInt(ParentObj, hook_interface_GetVerticalScrollBarPosition);
    finally
      SmartFreeObject(ParentObj);
    end;
  end else
  begin
    BoundIndex := SmartGetFieldInt(Obj, hook_interface_GetBoundsArrayIndex);
    Bounds := SmartGetFieldArrayObject(0, hook_static_GetInterfaceBoundsArray, BoundIndex);
    if((Bounds > 0) and (SmartGetFieldArrayBoolean(0, hook_static_InterfaceDismissBounds, BoundIndex)))then
    begin
      Result := Point(SmartGetFieldInt(Bounds, 'x'),
                      SmartGetFieldInt(Bounds, 'y'));
      SmartFreeObject(Bounds);
      Exit;
    end;
    SmartFreeObject(Bounds);
  end;
  Result := Point(X, Y);
end;

(*
R_GetInterfaceActions
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceActions(Obj: Integer): TStringArray;

Gets the string array of actions that can be performed on the interface.
Example: Withdrawing bank items, etc.

.. note::

  by Drags111

*)
function R_GetInterfaceActions(Obj: Integer): TStringArray;
var
  NumActions, I, Action, C: Integer;
  Temp: String;
begin
  NumActions := SmartGetFieldArraySize(Obj, Hook_Interface_GetActions, 1);
  if (NumActions <= 0)then
    Exit;

  C := 0;
  SetLength(Result, NumActions);

  for I := 0 to NumActions-1 do
  begin
    try
      Action := SmartGetFieldArrayObject(Obj, hook_interface_GetActions, I);
      if(Action = 0)then
        continue;
      Temp := R_TrimHTML(R_GetJavaString(Action, 512));
      if(Temp <> '')then
      begin
        Result[C] := Temp;
        Inc(C);
      end;
    finally
      SmartFreeObject(Action);
    end;
  end;
  SetLength(Result, c);
end;

(*
R_GetInterfaceChild
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceChild(ParentI, ChildI: Integer): TRSChild;

Gets all Interface -> Child information and stores in a TInterfaceChild.

.. note::

  by Drags111

*)
function R_GetInterfaceChild(ParentI, ChildI: Integer): TInterfaceChild;
var
  Child, TextObj: Integer;
  P: TPoint;
begin
  if not(R_ValidInterface(ParentI))then
    Exit;
  try
    Child := R_GetInterfaceChildRef(ParentI, ChildI);
    P := R_GetAbsoluteInterfacePos(Child);
    with Result do
    begin
      Actions := R_GetInterfaceActions(Child);
      ID := SmartGetFieldInt(Child, hook_interface_GetID);
      ComponentID := SmartGetFieldInt(Child, hook_interface_GetComponentID);
      ParentID := R_GetInterfaceParentID(Child);
      Stack := SmartGetFieldInt(Child, hook_interface_GetComponentStackSize);
      TextureID := SmartGetFieldInt(Child, hook_interface_GetTextureID);
      ModelID := SmartGetFieldInt(Child, hook_interface_GetModelID);
      ModelZoom := SmartGetFieldInt(Child, hook_interface_GetModelZoom);
      RelativeX := SmartGetFieldInt(Child, hook_interface_GetX);
      RelativeY := SmartGetFieldInt(Child, hook_interface_GetY);
      Width := SmartGetFieldInt(Child, hook_interface_GetWidth);
      Height := SmartGetFieldInt(Child, hook_interface_GetHeight);

      try
        TextObj := SmartGetFieldObject(Child, hook_interface_GetText);
        Text := R_TrimHTML(R_GetJavaString(TextObj, 512));
      finally
        SmartFreeObject(TextObj);
      end;

      TextColor := SmartGetFieldInt(Child, hook_interface_GetTextColor);

      try
        TextObj := SmartGetFieldObject(Child, hook_interface_GetComponentName);
        Name := R_TrimHTML(R_GetJavaString(TextObj, 512));
      finally
        SmartFreeObject(TextObj);
      end;

      IsHidden := SmartGetFieldBoolean(Child, hook_interface_IsHidden);
      VScrollSize := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarSize);
      VScrollPosition := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarPosition);
      VThumbSize := SmartGetFieldInt(Child, hook_interface_GetVerticalScrollBarThumbSize);
      HScrollSize := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarSize);
      HScrollPosition := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarPosition);
      HThumbSize := SmartGetFieldInt(Child, hook_interface_GetHorizontalScrollBarThumbSize);
      BoundsArrayIndex := SmartGetFieldInt(Child, hook_interface_GetBoundsArrayIndex);
      X := P.x;
      Y := P.y;
      Bounds := IntToBox(X, Y, X+Width, Y+Height);
    end;
  finally
    SmartFreeObject(Child);
  end;
end;

(*
R_GetInterfaceComponent
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceComponent(ParentI, ChildI, ComponentI: Integer): TRSComponent;

Gets all Interface -> Child -> Component information and stores in a
TInterfaceComponent.

.. note::

  by Drags111

*)
function R_GetInterfaceComponent(ParentI, ChildI, ComponentI: Integer): TInterfaceComponent;
var
  Component, TextObj: Integer;
  P: TPoint;
begin
  if not(R_ValidInterface(ParentI))then
    Exit;
  try
    Component := R_GetInterfaceComponentRef(ParentI, ChildI, ComponentI);
    P := R_GetAbsoluteInterfacePos(Component);
    with Result do
    begin
      Actions := R_GetInterfaceActions(Component);
      ID := SmartGetFieldInt(Component, hook_interface_GetID);
      ComponentID := SmartGetFieldInt(Component, hook_interface_GetComponentID);
      ParentID := R_GetInterfaceParentID(Component);
      Stack := SmartGetFieldInt(Component, hook_interface_GetComponentStackSize);
      TextureID := SmartGetFieldInt(Component, hook_interface_GetTextureID);
      ModelID := SmartGetFieldInt(Component, hook_interface_GetModelID);
      ModelZoom := SmartGetFieldInt(Component, hook_interface_GetModelZoom);
      RelativeX := SmartGetFieldInt(Component, hook_interface_GetX);
      RelativeY := SmartGetFieldInt(Component, hook_interface_GetY);
      Width := SmartGetFieldInt(Component, hook_interface_GetWidth);
      Height := SmartGetFieldInt(Component, hook_interface_GetHeight);

      try
        TextObj := SmartGetFieldObject(Component, hook_interface_GetText);
        Text := R_TrimHTML(R_GetJavaString(TextObj, 512));
      finally
        SmartFreeObject(TextObj);
      end;

      TextColor := SmartGetFieldInt(Component, hook_interface_GetTextColor);

      try
        TextObj := SmartGetFieldObject(Component, hook_interface_GetComponentName);
        Name := R_TrimHTML(R_GetJavaString(TextObj, 512));
      finally
        SmartFreeObject(TextObj);
      end;

      IsHidden := SmartGetFieldBoolean(Component, hook_interface_IsHidden);
      VScrollSize := SmartGetFieldInt(Component, hook_interface_GetVerticalScrollBarSize);
      VScrollPosition := SmartGetFieldInt(Component, hook_interface_GetVerticalScrollBarPosition);
      VThumbSize := SmartGetFieldInt(Component, hook_interface_GetVerticalScrollBarThumbSize);
      HScrollSize := SmartGetFieldInt(Component, hook_interface_GetHorizontalScrollBarSize);
      HScrollPosition := SmartGetFieldInt(Component, hook_interface_GetHorizontalScrollBarPosition);
      HThumbSize := SmartGetFieldInt(Component, hook_interface_GetHorizontalScrollBarThumbSize);
      BoundsArrayIndex := SmartGetFieldInt(Component, hook_interface_GetBoundsArrayIndex);
      X := P.x;
      Y := P.y;
      Bounds := IntToBox(X, Y, X+Width, Y+Height);
    end;
  finally
    SmartFreeObject(Component);
  end;
end;

(*
R_GetInterfaceText
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetInterfaceText(ParentI, ChildI: Integer): String;

Returns the Interface -> Child's text.

.. note::

  by Method

*)
function R_GetInterfaceText(ParentI, ChildI: Integer): String;
var
  Text, Child: Integer;
begin
  Child := R_GetInterfaceChildRef(ParentI, ChildI);
  Text := SmartGetFieldObject(Child, hook_interface_GetText);
  Result := R_GetJavaString(Text, 512);
  SmartFreeObject(Text);
  SmartFreeObject(Child);
end;

(*
R_ClickInterface
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure R_ClickInterface(Child: TInterfaceChild; ClickType: Integer);

Moves the mouse to and (depending on the ClickType) will click the interface
child/component. The ClickType follows the same rule as MouseBox:
  1: Left Click
  2: Right Click
  3: No Click
Works for both TRSChild and TRSComponent

.. note::

  by Drags111

*)
procedure R_ClickInterface(Child: TInterfaceChild; ClickType: Integer);
begin
  MouseBox(Child.X, Child.Y, Child.Bounds.X2, Child.Bounds.Y2, ClickType);
end;

function R_GetMusic: String;
begin
  Result := R_GetInterfaceText(187, 4);
end;
