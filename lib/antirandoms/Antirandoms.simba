{$include_once ./Mordaut.simba}
{$include_once ./Maze.simba}

const
  R_RandomCount = 18;

  Result_Randoms_All = 0;
  Result_Randoms_Failed = 1;
  Result_Randoms_Solved = 2;

type
  R_Random = record
    RandName, Music: String;
    InRandom, SolveRandom: function: Boolean;
  end;

var
  R_RandomArr: array [0..17] of R_Random;
  R_RandomVarSet: Boolean;

procedure R_SetupRandoms;
begin
  with R_RandomArr[Rand_Maze] do
  begin
    RandName := 'Maze';
    Music := '';
    InRandom := @RMaze_InRandom;
    SolveRandom := @RMaze_Solve;
  end;

  with R_RandomArr[Rand_Mordaut] do
  begin
    RandName := 'Mordaut';
    Music := '';
    InRandom := @RMordaut_InRandom;
    SolveRandom := @RMordaut_Solve;
  end;

  // Needs deposit
  //With r_RandomArr[rand_CapnArnav] do

  // Needs deposit
  //With r_RandomArr[rand_ScapeRune] do

  // Needs deposit
  //With r_RandomArr[rand_Forester] do

  // Needs deposit
  //With r_RandomArr[rand_Leo] do

  // This is just broken to hell
  //With r_RandomArr[rand_Pillory] do

  // Needs deposit
  //With r_RandomArr[rand_PrisonPete] do

  R_RandomVarSet := True;
end;

function R_SolveNonTalkingRandoms: Boolean;
var
  I, iTime: Integer;
  Music: String;
  InRand: Boolean;
  T: TTile;
  RandomBox: TBox;
begin
  If Not R_LoggedIn then
    Exit;

  If Not R_RandomVarSet then
    r_SetupRandoms;

  Music := LowerCase(R_GetMusic);
  for I := 0 to R_RandomCount-1 do
  begin

    If (R_RandomArr[I].Music = Music)or(R_RandomArr[I].Music = '')then
      if (R_RandomArr[I].InRandom <> nil) then
        InRand := R_RandomArr[I].InRandom()
      else
      begin
        if (not(R_RandomArr[I].InRandom <> nil)and(R_RandomArr[I].Music = ''))then
           Continue;
        R_Debug('Might be in a random(missing InRandom function), terminating.', '');
        Players[CurrentPlayer].Rand := R_RandomArr[I].RandName;
        LogOut;
        Exit;
      end;

    if (InRand) then
    begin
      Players[CurrentPlayer].Rand := R_RandomArr[I].RandName;
      R_Debug('Trying to solve: ' + R_RandomArr[I].RandName, '');
      T := R_GetMyPos;
      RandomBox := IntToBox(T.X-70, T.Y-70, T.X+70, T.Y+70);

      if (R_RandomArr[I].SolveRandom <> nil) then
      begin
        SetAngle(True);
        Result := R_RandomArr[I].SolveRandom()
      end else
      begin
        R_Debug('No random solver for ' + R_RandomArr[I].RandName, '');
        Logout;
        Players[CurrentPlayer].Active := False;
        Inc(RandFailed[I]);
        Exit;
      end;

      if (not Result) then
      begin
        R_Debug('Random solving failed for ' + R_RandomArr[I].RandName, '');
        Logout;
        Players[CurrentPlayer].Active := False;
        Inc(RandFailed[I]);
        Exit;
      end else
        R_Debug(R_RandomArr[I].RandName + ' solved', '');

      iTime := GetSystemTime;
      While R_TileInBox(RandomBox, R_GetMyPos)do
      begin
        Wait(1000+Random(1500));
        If (GetSystemTime - iTime > 30000)then
          Exit;
      end;
      R_Debug('Out of random', '');
      Wait(3000+Random(2000));

      Players[CurrentPlayer].Rand := '';
      Inc(RandSolved[I]);
      Exit;
    end;

  end;
end;

{*******************************************************************************
function R_FindRandoms: Boolean;
By: Nava2
Description: Calls the random checks.
*******************************************************************************}
function R_FindRandoms: Boolean;
begin
  Result := R_SolveNonTalkingRandoms;
  //R_FindRewardBoxes;

  if (Result) then
  begin
    if (SRL_Procs[srl_OnFindRandom] <> nil) then
      SRL_Procs[srl_OnFindRandom]();
  end;
end;

{*******************************************************************************
function R_OnFindRandomCall(var Cont : boolean) : boolean;
Description: This event is called when SRL calls the FindNormalRandoms procedure.
Thus it will always try to solve the randoms by using reflection first!
*******************************************************************************}
function R_OnFindRandomCall(var Cont : boolean) : boolean;
begin
  Result := R_FindRandoms;
  Cont := not Result;
end;

{*******************************************************************************
function RandomsResult(Which: Integer): TStringArray;
Description:
  Result_Randoms_All = Solved + Failed
  Result_Randoms_Failed = Failed
  Result_Randoms_Solved = Solved

Results the randoms solving in a TStringArray, example  ['[S] 1 Maze', '[F] 2 Forester']
[S] = Solved
[F] = Failed
*******************************************************************************}
function RandomsResult(Res: Integer): TStringArray;
var
  I, arrC: Integer;

begin
  If Not r_RandomVarSet then
    r_SetupRandoms;

  SetArrayLength(Result, 36);

  If(Res = Result_Randoms_Solved)or(Res = Result_Randoms_All)then
  begin
    For I:=0 to R_RandomCount-1 do
      If Not (RandSolved[I] = 0)then
      begin
        Result[arrC] := '[S] ' + ToStr(RandSolved[I]) + ' ' + R_RandomArr[I].RandName;
        Inc(arrC);
      end;
  end;

  If(Res = Result_Randoms_Failed)or(Res = Result_Randoms_All)then
    For I:=0 to R_RandomCount-1 do
      If Not (RandFailed[I] = 0)then
      begin
        Result[arrC] := '[F] ' + ToStr(RandSolved[I]) + ' ' + R_RandomArr[I].RandName;
        Inc(arrC);
      end;

  SetArrayLength(Result, arrC);
end;
