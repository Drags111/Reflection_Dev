type
  TRMaze_Door = record
    Tile: TTile;
    Dir: String;
  end;

  TRMaze_Path = array of TRMaze_Door;

var
  RMazeVars_Paths: array[0..3] of TRMaze_Path;
  RMazeVars_LastDoor: TRMaze_Door;
  RMazeVars_EndTile: TTile;

function RMaze_Path(Path: Integer): TRMaze_Path;
var
  Tiles: TTileArray;
  Dirs: TStringArray;
  I: Integer;
begin
  R_Debug('Loading Path[' + ToStr(Path) + ']', 'Maze');
  case Path of
    0: begin
      SetLength(Result, 17);
      SetLength(Tiles, 17);
      SetLength(Dirs, 17);

      Tiles := [Point(2903, 4554), Point(2890, 4566), Point(2892, 4578),
                Point(2894, 4567), Point(2896, 4562), Point(2905, 4560),
                Point(2915, 4560), Point(2909, 4562), Point(2924, 4566),
                Point(2922, 4575), Point(2916, 4568), Point(2904, 4573),
                Point(2906, 4585), Point(2916, 4586), Point(2920, 4582),
                Point(2910, 4582), Point(2910, 4572)];
      Dirs  := ['n', 'e', 'e', 'e', 'e', 's', 'n', 'n', 'w', 'w',
                'n', 'w', 'n', 's', 'w', 's', 'n'];
      for I := 0 to High(Result) do
      begin
        Result[I].Tile := Tiles[I];
        Result[I].Dir  := Dirs[I];
      end;
    end;
    1: begin
      SetLength(Result, 15);
      SetLength(Tiles, 15);
      SetLength(Dirs, 15);

      Tiles := [Point(2890, 4588), Point(2888, 4596), Point(2893, 4600),
                Point(2901, 4598), Point(2897, 4596), Point(2894, 4587),
                Point(2896, 4582), Point(2898, 4570), Point(2900, 4567),
                Point(2911, 4566), Point(2906, 4586), Point(2916, 4586),
                Point(2920, 4582), Point(2910, 4582), Point(2910, 4572)];
      Dirs  := ['w', 'w', 's', 's', 's', 'e', 'e', 'e', 'e', 'n',
                'n', 's', 'w', 's', 'n'];
      for I := 0 to High(Result) do
      begin
        Result[I].Tile := Tiles[I];
        Result[I].Dir  := Dirs[I];
      end;
    end;
    2: begin
      SetLength(Result, 15);
      SetLength(Tiles, 15);
      SetLength(Dirs, 15);

      Tiles := [Point(2930, 4554), Point(2912, 4552), Point(2936, 4556),
                Point(2934, 4568), Point(2932, 4575), Point(2930, 4561),
                Point(2929, 4581), Point(2930, 4590), Point(2924, 4592),
                Point(2926, 4575), Point(2924, 4583), Point(2916, 4586),
                Point(2920, 4582), Point(2910, 4582), Point(2910, 4572)];
      Dirs  := ['s', 's', 'w', 'w', 'w', 'w', 'e', 'w', 's', 'w',
                'w', 's', 'w', 's', 'n'];
      for I := 0 to High(Result) do
      begin
        Result[I].Tile := Tiles[I];
        Result[I].Dir  := Dirs[I];
      end;
    end;
    3: begin
      SetLength(Result, 15);
      SetLength(Tiles, 15);
      SetLength(Dirs, 15);

      Tiles := [Point(2932, 4597), Point(2921, 4599), Point(2909, 4600),
                Point(2913, 4598), Point(2908, 4596), Point(2919, 4594),
                Point(2908, 4592), Point(2898, 4585), Point(2903, 4588),
                Point(2902, 4575), Point(2906, 4586), Point(2916, 4586),
                Point(2920, 4582), Point(2910, 4582), Point(2910, 4572)];
      Dirs  := ['n', 'n', 's', 's', 's', 's', 's', 'e', 's', 'e',
                'n', 's', 'w', 's', 'n'];
      for I := 0 to High(Result) do
      begin
        Result[I].Tile := Tiles[I];
        Result[I].Dir  := Dirs[I];
      end;
    end;
  end;
end;

procedure RMaze_SetVars;
var
  I: Integer;
begin
  RMazeVars_LastDoor.Tile := Point(2910, 4576);
  RMazeVars_LastDoor.Dir := 'e';
  RMazeVars_EndTile := Point(2912, 4576);
  for I := 0 to 3 do
    RMazeVars_Paths[I] := RMaze_Path(I);
end;

function RMaze_InRandom: Boolean;
var
  Text: String;
begin
  Result := False;
  Text := R_GetInterfaceText(209, 2);
  Result := (Text <> '');
end;

function RMaze_OpenDoor(Door: TRMaze_Door): Boolean;
var
  P: TPoint;
  Tries, X, Y: Integer;
begin
  Result := False;
  case Door.Dir of
    'n', 's': R_MakeCompass('s');
    'e', 'w': R_MakeCompass('w');
  end;
  wait(300+Random(100));

  for Tries := 0 to 10 do
  begin
    case Door.Dir of
      'n': P := R_TileToMSEx(Door.Tile, 0.5, 0.9, 300+Random(100));
      's': P := R_TileToMSEx(Door.Tile, 0.5, 0.1, 300+Random(100));
      'w': P := R_TileToMSEx(Door.Tile, 0.1, 0.5, 300+Random(100));
      'e': P := R_TileToMSEx(Door.Tile, 0.9, 0.5, 300+Random(100));
    end;
    MMouse(P.x, P.y, 7, 7);
    Wait(100+Random(50));
    Result := R_OptionExists('Open');
    if Result then
    begin
      GetMousePos(X, Y);
      Mouse(X, Y, 0, 0, False);
      Result := R_ChooseOption('Open');
      if Result then
        Break;
      MMouse(P.x-50, P.y-50, 4, 4);
    end else
      if(SmartGetFieldBoolean(0, hook_static_MenuOpen))then
        MMouse(P.x-50, P.y-50, 4, 4);
  end;

  if not Result then
    Exit;

  R_WaitToMove(3000);
  R_Flag;

  Wait(1000+Random(300));
end;

function RMaze_Solve: Boolean;
var
  T, Add, I, K, BX, BY: Integer;
  Stuck, First: Boolean;
  Path: TRMaze_Path;
  P: TPoint;
  Blocks: array of TIntegerArray;
begin
  Result := False;
  RMaze_SetVars;
  R_MakeCompass('n');
  SetAngle(True);
  if not R_GetCollisionMap(Blocks)then
  begin
    R_Debug('Unable to retrieve collision map.', 'Maze');
    Exit;
  end;
  BX := SmartGetFieldInt(0, hook_static_BaseX);
  BY := SmartGetFieldInt(0, hook_static_BaseY);
  MarkTime(T);

  while(RMaze_InRandom and (TimeFromMark(T) < 600000))do
  begin
    wait(100+Random(100));

    if(BX <> SmartGetFieldInt(0, hook_static_BaseX)) or
      (BY <> SmartGetFieldInt(0, hook_static_BaseY))then
    begin
      if not R_GetCollisionMap(Blocks)then
      begin
        R_Debug('Unable to retrieve collision map.', 'Maze');
        Exit;
      end;
      BX := SmartGetFieldInt(0, hook_static_BaseX);
      BY := SmartGetFieldInt(0, hook_static_BaseY);
    end;

    if(R_GetNPCChatMessage <> '')then
      R_WaitNPCChatChange(True, 5000);

    if not R_CanReachEx(RMazeVars_LastDoor.Tile, True, Blocks)then
    begin
      Stuck := True;
      Add := -1;

      for K := 0 to High(RMazeVars_Paths)do
      begin
        if not Stuck then
          Break;
        Path := RMazeVars_Paths[K];
        First := True;

        I := High(Path);
        while(I >= 0) and (I < Length(Path))do
        begin
          if First then
            First := False
          else
            I := I + Add;
          if(I < 0) or (I >= Length(Path))then
            Break;

          if(BX <> SmartGetFieldInt(0, hook_static_BaseX)) or
            (BY <> SmartGetFieldInt(0, hook_static_BaseY))then
          begin
            if not R_GetCollisionMap(Blocks)then
            begin
              R_Debug('Unable to retrieve collision map.', 'Maze');
              Exit;
            end;
            BX := SmartGetFieldInt(0, hook_static_BaseX);
            BY := SmartGetFieldInt(0, hook_static_BaseY);
          end;

          if(R_CanReachEx(RMazeVars_LastDoor.Tile, True, Blocks))then
            Break;

          if not R_CanReachEx(Path[I].Tile, True, Blocks)then
            Continue;

          if(I > 0) and (not R_CanReachEx(Path[I-1].Tile, True, Blocks))then
            Continue;

          Add := 1;

          if(R_DistanceFromTile(Path[I].Tile) > 4)then
            R_WindWalk(Path[I].Tile);

          R_Flag;
          RMaze_OpenDoor(Path[I]);
          Stuck := False;
        end;
      end;
      Continue;
    end;

    if not R_CanReachEx(RMazeVars_EndTile, True, Blocks)then
    begin
      RMaze_OpenDoor(RMazeVars_LastDoor);
      Continue;
    end;

    if not Result then
    begin
      P := R_TileToMS(RMazeVars_EndTile, 400+Random(100));
      if(P.x = -1) or (P.y = -1)then
        Continue;
      Mouse(P.X, P.Y, 4, 4, false);
      Result := R_ChooseOption('touch');
    end;
  end;
  if Result then
  begin
    R_Debug('Finished the maze!', 'Maze');
    Wait(7000+Random(1000));
    Exit;
  end;
  R_Debug('Failed the maze random.', 'Maze');
end;
