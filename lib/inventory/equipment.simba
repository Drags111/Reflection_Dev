//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                    Tiles Routines                            --||
//------------------------------------------------------------------//

//---                         Constants                           --//
const
  INTERFACE_EQUIPMENT  = 387;

//---                          Records                            --//

type
{Holds information about an equipment slot}
  TEquipment = record
    ID: Integer;
    Name: string;
    IsAmmo: Boolean;
    Count: Integer;
    Actions: TStringArray;
  end;

{Container for TEquiptment records}
  TEquipmentSet = record
    Items: array [0..10] of TEquipment;
    AmmoCount: Integer;
  end;

{*******************************************************************************
function NULL_EQUIPMENT: TEquipment;
By:
Description: Nulls a TEquipment.
*******************************************************************************}
function NULL_EQUIPMENT: TEquipment;
begin
  with Result do
  begin
    ID := NULL_INT;
    Name := NULL_STRING;
    IsAmmo := False;
    Count := Null_INT;
    Actions := [];
  end;
end;

{*******************************************************************************
function R_GetEquippedItemAt(Slot: Integer): TInvItem;
By: Drags111
Description: Returns a TInvItem of the item in the specified equipment slot.
                      (see constants at top of page.)
*******************************************************************************}
function R_GetEquippedItemAt(Slot: Integer): TEquipment;
var
  Inter, Child, textbytes, ID, Acts, ArrayLength: Integer;
  Action, Count, i: Integer;
  Temp: String;
begin
  Result := NULL_EQUIPMENT;
  if not R_ValidInterface(INTERFACE_EQUIPMENT) then Exit;
  GameTab(TAB_EQUIP);
  try
    inter := SmartGetFieldArrayObject(0, hook_static_GetInterfaces, INTERFACE_EQUIPMENT);
    Child := SmartGetFieldArrayObject(inter, '', (slot * 3) + 8);
    ID := SmartGetFieldInt(Child, hook_interface_GetComponentID);
    textbytes := SmartGetFieldObject(Child, hook_interface_GetComponentName);
    acts := SmartGetFieldObject(Child, hook_interface_GetActions);
    if (ID > 0) then
    begin
      Result.Id := ID;
      Result.Name := R_TrimHTML(R_GetJavaString(textbytes, 255));
      Result.Count := SmartGetFieldInt(Child, hook_interface_GetComponentStackSize);
      Result.IsAmmo := (Result.Count > 1);

      try
        ArrayLength := (SmartGetFieldArraySize(Acts, '', 1));
        SetLength(Result.Actions, ArrayLength);
        Count := 0;

        for i := 0 to ArrayLength-1 do
        begin
          try
            Action := SmartGetFieldArrayObject(Child, hook_interface_GetActions, i);
            Temp := R_GetJavaString(Action, 255);
            if not(Temp = NULL_STRING)then
            begin
              Result.Actions[Count] := R_TrimHTML(Temp);
              Inc(Count);
            end;
          finally
            SmartFreeObject(Action);
          end;
        end;

        SetLength(Result.Actions, Count);
      finally
        SmartFreeObject(Acts);
      end;

    end;
   finally
    SmartFreeObject(Acts);
    SmartFreeObject(textbytes);
    SmartFreeObject(Child);
    SmartFreeObject(inter);
  end;
end;

{*******************************************************************************
function R_GetEquipment: TEquipmentSet;
By: Drags111
Description: Returns a TEquipmentSet of your char.
*******************************************************************************}
function R_GetEquipment: TEquipmentSet;
var
  i: Integer;
begin
  if not R_ValidInterface(INTERFACE_EQUIPMENT) then Exit;
  GameTab(TAB_EQUIP);
  for i := 0 to 10 do
  begin
    Result.Items[i] := R_GetEquippedItemAt(i);
    if (Result.Items[i].isAmmo) then
      Result.AmmoCount := Result.AmmoCount + Result.Items[i].Count;
  end;
end;

{*******************************************************************************
function R_GetEquippedIDAt(slot: Integer): Integer;
By: Drags111
Description: Returns a the ID of the item in the slot.
*******************************************************************************}
function R_GetEquippedIDAt(slot: Integer): Integer;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := Equipment.Items[slot].ID;
end;

{*******************************************************************************
function R_GetEquippedNameAt(slot: Integer): string;
By: Drags111
Description: Returns a the Name of the item in the slot.
*******************************************************************************}
function R_GetEquippedNameAt(slot: Integer): string;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := Equipment.Items[slot].Name;
end;

{*******************************************************************************
function R_HasItemEquipped(slot: Integer): Boolean;
By: Drags111
Description: Returns true if there is an item equipped at the slot.
*******************************************************************************}
function R_HasItemEquipped(slot: Integer): Boolean;
var
  Equipment: TEquipmentSet;
begin
  Equipment := R_GetEquipment;
  Result := (Equipment.Items[slot].ID <> NULL_INT);
end;

{*******************************************************************************
function R_IsEquippedEx(TheVarArr: TVariantArray): Boolean;
By: Drags111
Description: Returns true if the there is an item equipped with at least one of
the names or ids you input as TheVarArr.
*******************************************************************************}
function R_IsEquippedEx(TheVarArr: TVariantArray): Boolean;
var
  Equipment: TEquipmentSet;
  i, k, vType: Integer;
  B: Boolean;
begin
  Result := False;
  Equipment := R_GetEquipment;

  for k := 0 to High(Equipment.Items) do
    for i := 0 to High(TheVarArr) do
    begin
      vType := VarType(TheVarArr[i]);
      if (vType = varString) then
        TheVarArr[i] := LowerCase(Trim(TheVarArr[i]));
      case vType of
        varInteger: B := (Equipment.Items[k].ID = TheVarArr[i]);
        varString: B := (Pos(TheVarArr[i], LowerCase(Trim(Equipment.Items[k].Name))) > 0);
        else Exit;
      end;
      if not B then continue;
      Result := True;
      Exit;
    end;
end;

{*******************************************************************************
function R_IsEquipped(TheVar: Variant): Boolean;
By: Drags111
Description: Returns true if the there is an item equipped with the name or id
you input as TheVar.
*******************************************************************************}
function R_IsEquipped(TheVar: Variant): Boolean;
begin
  Result := R_IsEquippedEx([TheVar]);
end;

{*******************************************************************************
function R_GetAmmoCount: integer;
By: Drags111
Description: Returns the number of arrows or bolts etc, you have equipped.
*******************************************************************************}
function R_GetAmmoCount: Integer;
var
  Slot: TEquipment;
begin
  Slot := R_GetEquippedItemAt(EQUIPMENT_AMMO);
  Result := Slot.Count;
end;
